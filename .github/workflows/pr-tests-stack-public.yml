name: PR Tests - Stack - Public

on:
  workflow_call:

  workflow_dispatch:
    inputs:
      none:
        description: "Run Stack Integration Tests Manually"
        required: false

jobs:
  pr-tests-stack-public:
    strategy:
      max-parallel: 99
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
        pytest-modules: ["frontend network"]
      fail-fast: false

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v3

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          python -m pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install -U tox

      - name: Install jaxlib
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        run: |
          python -c "import platform; import os; os.system('pip install jaxlib==0.3.14 -f https://whls.blob.core.windows.net/unstable/index.html') if platform.system().lower() == 'windows' else ''"

      - name: Install Docker Compose
        if: steps.changes.outputs.stack == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p ~/.docker/cli-plugins
          DOCKER_COMPOSE_VERSION=v2.16.0
          curl -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Docker Setup Docker
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'macos-latest'
        uses: crazy-max/ghaction-setup-docker@v1.1.0

      - name: Docker Compose on MacOS
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install docker-compose
          mkdir -p ~/.docker/cli-plugins
          ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose || true
          docker compose version

      - name: Docker Setup Docker - Windows
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Start-BitsTransfer -Source "https://download.docker.com/win/static/stable/x86_64/docker-23.0.1.zip"
          Expand-Archive docker-23.0.1.zip -DestinationPath $Env:ProgramFiles
          &$Env:ProgramFiles\Docker\dockerd --register-service
          Start-Service docker
          docker version
          docker compose version

      - name: Remove existing containers
        if: steps.changes.outputs.stack == 'true'
        continue-on-error: true
        shell: bash
        run: |
          docker rm $(docker ps -aq) --force || true
          docker volume prune -f || true
          docker buildx use default || true

      - name: Run integration tests
        if: steps.changes.outputs.stack == 'true'
        timeout-minutes: 60
        env:
          HAGRID_ART: false
          PYTEST_MODULES: "${{ matrix.pytest-modules }}"
          HAGRID_FLAGS: "--tag=beta --test --build-src=dev"
        run: |
          tox -e stack.test.integration
