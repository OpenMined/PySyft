name: PR Tests - Stack

on:
  # schedule:
  #   - cron: "0 22 * * *" # 7pm Brazil, 10pm UTC, 8am AEST
  workflow_call:

  pull_request:
    branches:
      - dev
      - main
      - "0.8"

  workflow_dispatch:
    inputs:
      none:
        description: "Run Version Tests Manually"
        required: false

jobs:
  pr-tests-stack:
    strategy:
      max-parallel: 99
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest, windows]
        os: [ubuntu-latest]
        python-version: ["3.11"]
        pytest-modules: ["frontend network"]
      fail-fast: false

    runs-on: ${{matrix.os}}

    steps:
      - name: "clean .git/config"
        if: matrix.os == 'windows'
        continue-on-error: true
        shell: bash
        run: |
          echo "deleting ${GITHUB_WORKSPACE}/.git/config"
          rm ${GITHUB_WORKSPACE}/.git/config

      - uses: actions/checkout@v3

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        if: steps.changes.outputs.stack == 'true'
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        if: steps.changes.outputs.stack == 'true'
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        if: steps.changes.outputs.stack == 'true'
        run: |
          python -m pip install --upgrade --user pip

      - name: Install tox
        if: steps.changes.outputs.stack == 'true'
        run: |
          pip install -U tox

      - name: Show choco installed packages
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: list --localonly

      - name: Install git
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install git.install --params "/GitAndUnixToolsOnPath /WindowsTerminal /NoAutoCrlf" -y

      - name: Install cmake
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install cmake.portable --installargs 'ADD_CMAKE_TO_PATH=System' -y

      - name: Check cmake version
        if: steps.changes.outputs.stack == 'true' &&  matrix.os == 'windows'
        run: |
          cmake --version
        shell: cmd

      - name: Install visualcpp-build-tools
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install visualstudio2019-workload-vctools -y

      - name: Install jaxlib
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'windows'
        run: |
          python -c "import platform; import os; os.system('pip install jaxlib==0.4.10 -f https://whls.blob.core.windows.net/unstable/index.html') if platform.system().lower() == 'windows' else ''"

      - name: Install Docker Compose
        if: steps.changes.outputs.stack == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p ~/.docker/cli-plugins
          DOCKER_COMPOSE_VERSION=v2.16.0
          curl -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Docker on MacOS
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'macos-latest'
        uses: crazy-max/ghaction-setup-docker@v1.1.0

      - name: Docker Compose on MacOS
        if: steps.changes.outputs.stack == 'true' && matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install docker-compose
          mkdir -p ~/.docker/cli-plugins
          ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose || true
          docker compose version

      - name: Remove existing containers
        if: steps.changes.outputs.stack == 'true'
        continue-on-error: true
        shell: bash
        run: |
          docker rm $(docker ps -aq) --force || true
          docker volume prune -f || true
          docker buildx use default || true

      - name: Run integration tests
        if: steps.changes.outputs.stack == 'true'
        timeout-minutes: 60
        env:
          HAGRID_ART: false
          PYTEST_MODULES: "${{ matrix.pytest-modules }}"
        run: |
          tox -e stack.test.integration

      #Run log collector python script
      - name: Run log collector
        timeout-minutes: 5
        if: failure()
        shell: bash
        run: |
          python ./scripts/container_log_collector.py

      # Get Job name and url
      - name: Get job name and url
        id: job_name
        if: failure()
        run: |
          echo "::set-output name=job_name::$(echo ${{ github.job }})"
          echo "::set-output name=url::$(echo ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Get current date
        id: date
        if: failure()
        shell: bash
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Upload logs to GitHub
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ steps.job_name.outputs.job_name }}-${{ matrix.pytest-modules }}-logs-${{ steps.date.outputs.date }}
          path: ./logs/${{ steps.job_name.outputs.job_name}}/

      - name: Mandatory Container cleanup
        if: steps.changes.outputs.stack == 'true'
        continue-on-error: true
        shell: bash
        run: |
          docker rm `docker ps -aq` --force || true
          docker volume prune -f || true

      # Get Job name and url
      - name: Reboot node
        if: matrix.os == 'windows' && failure()
        run: |
          shutdown /r /t 1

      #Get Pull request url
      - name: Get pull request url
        id: pull_request
        if: failure()
        run: |
          echo "::set-output name=url::$(echo ${{ github.event.pull_request.html_url }})"

      - name: Job Report Status
        # cant access secrets on forks
        if: github.repository == 'OpenMined/PySyft' && failure()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          notification_title: " {workflow} has {status_message}"
          message_format: "${{matrix.os}} {emoji} *{job}* {status_message} in {run_url}"
          footer: "Find the PR here ${{ steps.pull_request.outputs.url }}"
          mention_users: "U01LNCACY03,U8KUAD396,UNMQ2SJSW,U01SAESBJA0"
          mention_users_when: "failure,warnings"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK_WEBHOOK_URL }}
