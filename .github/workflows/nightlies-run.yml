name: Nightlies

on:
  schedule:
    - cron: "0 00 * * *" # 12am UTC, 5:30pm Indian, 9pm Brazil, 11am AEDT
  workflow_dispatch:
    inputs:
      none:
        description: "Run Nightlies Tests Manually"
        required: false
  # pull_request:
  #   branches:
  #     - dev

jobs:
  call-grid-backend_test:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/grid-backend_tests.yml@dev

  call-hagrid-pr_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/hagrid-pr_tests.yml@dev

  call-linting:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/linting.yml@dev

  call-stack-integration_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/stack-integration_tests.yml@dev
    secrets: inherit

  call-syft-pr_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-pr_tests.yml@dev

  call-syft-security:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-security.yml@dev

  call-syft-version_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-version_tests.yml@dev

  # call-benchmark:
  #   if: github.repository == 'OpenMined/PySyft' # don't run on forks
  #   uses: OpenMined/PySyft/.github/workflows/benchmark.yml@dev
  #   secrets: inherit

  call-stack-integration-public_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/stack-integration-public_tests.yml@dev
    secrets: inherit

  stack-integration-tests-arm64:
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]

    runs-on: [self-hosted, linux]

    steps:
      - name: set permissions on work folder for self-runners
        run: |
          sudo chown -R $USER:$USER ~/actions-runner/_work/

      - uses: actions/checkout@v3

      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade --user pip

      - name: Install tox
        run: |
          pip install -U tox

      - name: Install Docker Compose
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p ~/.docker/cli-plugins
          DOCKER_COMPOSE_VERSION=v2.15.1
          curl -sSL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Setup linux/arm64 Docker
        run: |
          docker rm $(docker ps -aq) --force || true
          docker buildx create --platform linux/arm64 --name arm64builder || true
          docker buildx use arm64builder
          docker run --privileged --rm tonistiigi/binfmt --install arm64
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Run integration tests
        timeout-minutes: 300
        run: |
          EMULATION="true" HAGRID_FLAGS="--tag=local --test --platform linux/arm64" tox -e stack.test.integration

      - name: Run log collector
        timeout-minutes: 5
        if: failure()
        shell: bash
        run: |
          python ./scripts/container_log_collector.py

      - name: Get job name and url
        id: job_name
        if: failure()
        run: |
          echo "::set-output name=job_name::$(echo ${{ github.job }})"
          echo "::set-output name=url::$(echo ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Get current date
        id: date
        if: failure()
        shell: bash
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Upload logs to GitHub
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ steps.job_name.outputs.job_name }}-${{ matrix.pytest-modules }}-logs-${{ steps.date.outputs.date }}
          path: ./logs/${{ steps.job_name.outputs.job_name}}/

      - name: Mandatory Container cleanup
        if: steps.changes.outputs.stack == 'true'
        continue-on-error: true
        shell: bash
        run: |
          docker rm `docker ps -aq` --force || true
          docker volume prune -f || true
