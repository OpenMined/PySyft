name: Tests

on:
  pull_request:
    branches:
      - master
    paths:
      - '**.py'
      - 'setup.cfg'
      - '.github/workflows/tests.yml'

jobs:
  python-tests:
    strategy:
      max-parallel: 27
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.7, 3.6]
        torch-version: [1.5.0, 1.5.1, 1.6.0, 1.7.0]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: '%LOCALAPPDATA%\pip\Cache'
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Scan for security issues
        run: |
          pip install bandit
          bandit -r src -ll

      - name: Install pytorch Linux
        if: startsWith(runner.os, 'Windows') != true
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          if [ $TORCH_VERSION = "1.5.0" ]
          then
              TORCHVISION_VERSION="0.6.0"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              TORCHVISION_VERSION="0.6.1"
          elif [ $TORCH_VERSION = "1.6.0" ]
          then
              TORCHVISION_VERSION="0.7"
          elif [ $TORCH_VERSION = "1.7.0" ]
          then
              TORCHVISION_VERSION="0.8.1"
          fi
          pip install torch==${TORCH_VERSION}
          pip install torchvision==${TORCHVISION_VERSION}

      - name: Install pytorch Windows
        if: startsWith(runner.os, 'Windows')
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          If ($env:TORCH_VERSION -eq "1.5.0") {
              $env:TORCHVISION_VERSION="0.6.0"
          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {
              $env:TORCHVISION_VERSION="0.6.1"
          } Elseif ($env:TORCH_VERSION -eq "1.6.0") {
              $env:TORCHVISION_VERSION="0.7"
          } Elseif ($env:TORCH_VERSION -eq "1.7.0") {
              $env:TORCHVISION_VERSION="0.8.1"
          }
          pip install torch==$env:TORCH_VERSION+cpu torchvision==$env:TORCHVISION_VERSION+cpu -f https://download.pytorch.org/whl/torch_stable.html

      - name: Run normal tests without coverage
        run: |
          pip install -r requirements.txt
          pip install -e .
          pip freeze | grep torch
          pytest -m fast --cov-fail-under 0 -n auto

  python-linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - uses: pre-commit/action@v2.0.0

      - name: Run lint checks
        run: |
          set -e
          pip install -r requirements.txt
          ./scripts/build_proto.sh
          pre-commit run --all-files

  python-coverage:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Check coverage
        run: |
          pip install -r requirements.txt
          pip install -e .
          pytest -m fast -n auto

  python-slow-tests:
    strategy:
      max-parallel: 27
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.7, 3.6]
        torch-version: [1.5.0, 1.5.1, 1.6.0, 1.7.0]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Install pytorch Linux
        if: startsWith(runner.os, 'Windows') != true
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          if [ $TORCH_VERSION = "1.5.0" ]
          then
              TORCHVISION_VERSION="0.6.0"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              TORCHVISION_VERSION="0.6.1"
          elif [ $TORCH_VERSION = "1.6.0" ]
          then
              TORCHVISION_VERSION="0.7"
          elif [ $TORCH_VERSION = "1.7.0" ]
          then
              TORCHVISION_VERSION="0.8.1"
          fi
          pip install torch==${TORCH_VERSION}
          pip install torchvision==${TORCHVISION_VERSION}

      - name: Install pytorch Windows
        if: startsWith(runner.os, 'Windows')
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          If ($env:TORCH_VERSION -eq "1.5.0") {
              $env:TORCHVISION_VERSION="0.6.0"
          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {
              $env:TORCHVISION_VERSION="0.6.1"
          } Elseif ($env:TORCH_VERSION -eq "1.6.0") {
              $env:TORCHVISION_VERSION="0.7"
          } Elseif ($env:TORCH_VERSION -eq "1.7.0") {
              $env:TORCHVISION_VERSION="0.8.1"
          }
          pip install torch==$env:TORCH_VERSION+cpu torchvision==$env:TORCHVISION_VERSION+cpu -f https://download.pytorch.org/whl/torch_stable.html

      - name: Run allowlist tests
        run: |
          pip install -r requirements.txt
          pip install -e .
          pytest -m slow --cov-fail-under 0 -n auto

  python-nb-examples:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Run notebook API examples
        run: |
          pip install -r requirements.txt
          pip install -e .
          ./scripts/nb_test.sh
          pytest examples/api --cov-fail-under 0 -n auto
