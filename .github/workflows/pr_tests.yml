# PR Tests
# To speed up development we don't run all the tests when opening and updating a PR.
# Instead we first run the lint check which fails fast and then only run the
# `pytest -m fast` tests against Ubuntu and Windows and the notebook examples.
# Once these checks pass and we decide to do a merge, the actions in `merge_tests.yml`
# get executed.
name: PR Tests

on:
  pull_request:
    branches:
      - dev
    paths:
      - "**.py"
      - "**.txt"
      - "setup.cfg"
      - ".github/workflows/**.yml"
      - "examples/private-ai-series/**.ipynb"

jobs:
  python-linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - name: Build Protos
        run: |
          set -e
          pip install black isort --default-timeout=60
          ./scripts/build_proto.sh

      - uses: pre-commit/action@v2.0.0

      # - name: Run darglint via flake8 - Ignore Errors
      #   continue-on-error: true
      #   run: |
      #     pip install darglint flake8
      #     flake8 src tests

      # check docstring coverage. If head coverage < base, exitcode = 1
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install docstr-coverage
        run: pip install docstr-coverage --default-timeout=60

      - name: Get base coverage
        run: |
          git checkout ${{ github.event.pull_request.base.sha }}
          echo "BASE_COV=$(docstr-coverage -p src)" >> $GITHUB_ENV

      - name: Get head coverage
        continue-on-error: true
        run: |
          git checkout ${{ github.event.pull_request.head.sha }}
          docstr-coverage -p --fail-under=$BASE_COV src

      - name: Check docstring modified files
        if: ${{ failure() }}
        run: |
          git diff --name-only $(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}) | xargs docstr-coverage --accept-empty

  python-tests-fast:
    needs: [python-linting]
    strategy:
      max-parallel: 30
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        torch-version: [1.6.0, 1.7.1, 1.8.0]
        exclude:
          - python-version: 3.9
            torch-version: 1.6.0
          - python-version: 3.9
            torch-version: 1.7.1

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install PyTorch
        run: |
          pip install packaging --default-timeout=60
          python scripts/adjust_torch_versions.py ./requirements.torch.txt ${{ matrix.torch-version }}
          cat ./requirements.torch.txt
          pip install -r requirements.torch.txt --no-deps -f https://download.pytorch.org/whl/torch_stable.html --default-timeout=60

      - name: Install packages
        run: |
          pip install -r requirements.dev.txt --default-timeout=60
          pip install -e . --default-timeout=60
          pip list
        timeout-minutes: 20

      - name: Scan for security issues
        run: |
          bandit -r src

      - name: Run normal tests
        run: |
          pytest -m 'fast or slow' --cov syft --cov-fail-under 80 -n auto

      - name: Install supported library packages Linux and MacOS - Ignore Errors
        if: startsWith(runner.os, 'Windows') != true
        run: |
          cat requirements.libs.txt | xargs -I {} -n 1 pip install {} --no-deps --default-timeout=60 || true

      - name: Install supported library packages Windows - Ignore Errors
        if: startsWith(runner.os, 'Windows')
        run: |
          foreach ($i in cat requirements.libs.txt) {
            pip install $i --no-deps --default-timeout=60
          }

      - name: Run supported library tests
        run: |
          pip install -r requirements.libs.deps.txt --default-timeout=60
          pip list
          pytest -m libs --co
          pytest -m libs -n auto -k "not tenseal" --suppress-no-test-exit-code
          pytest -m libs -n 1 -k "tenseal" --suppress-no-test-exit-code

  python-nb-examples:
    needs: [python-linting]
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.9]
        torch-version: [1.8.0]
        # os: [ubuntu-latest, macos-latest]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install PyTorch
        run: |
          pip install packaging --default-timeout=60
          python scripts/adjust_torch_versions.py ./requirements.torch.txt ${{ matrix.torch-version }}
          cat ./requirements.torch.txt
          pip install -r requirements.torch.txt --no-deps -f https://download.pytorch.org/whl/torch_stable.html --default-timeout=60

      - name: Install packages
        run: |
          pip install -r requirements.dev.txt --default-timeout=60
          pip install -e . --default-timeout=60
          pip list
        timeout-minutes: 20

      - name: Run notebook API examples
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          ./scripts/nb_test.sh
          pytest examples/api -n auto

      - name: Install supported library packages Linux and MacOS - Ignore Errors
        if: startsWith(runner.os, 'Windows') != true
        run: |
          cat requirements.libs.txt | xargs -I {} -n 1 pip install {} --no-deps --default-timeout=60 || true
          pip install -r requirements.libs.deps.txt --default-timeout=60

      - name: Run notebook Duet examples
        run: |
          python ./scripts/mnist.py
          python ./scripts/nb_duet_test.py
          pytest -m duet -n 1 --suppress-no-test-exit-code

  pygrid-unit-tests:
    needs: [python-linting]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        torch-version: [1.8.0]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - uses: actions/checkout@v2
        with:
          repository: "OpenMined/PyGrid"
          ref: "pygrid_0.4.0"
          path: "pygrid"

      - name: Install PyTorch
        run: |
          pip install packaging --default-timeout=60
          python scripts/adjust_torch_versions.py ./requirements.torch.txt ${{ matrix.torch-version }}
          cat ./requirements.torch.txt
          pip install -r requirements.torch.txt --no-deps -f https://download.pytorch.org/whl/torch_stable.html --default-timeout=60

      - name: Test PyGrid
        continue-on-error: true
        run: |
          pip install -e . --default-timeout=60
          pip install -r requirements.grid.txt --default-timeout=60
          pytest ./pygrid/apps/domain/tests
          pytest ./pygrid/apps/network/tests
          pytest ./pygrid/apps/worker/tests

  pygrid-integration-tests:
    needs: [python-linting]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]
        torch-version: [1.8.0]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip --default-timeout=60

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - uses: actions/checkout@v2
        with:
          repository: "vvmnnnkv/PyGrid"
          ref: "mcfl-legacy-model-serialization"
          path: "pygrid"

      - name: Install PyTorch
        run: |
          pip install packaging --default-timeout=60
          python scripts/adjust_torch_versions.py ./requirements.torch.txt ${{ matrix.torch-version }}
          cat ./requirements.torch.txt
          pip install -r requirements.torch.txt --no-deps -f https://download.pytorch.org/whl/torch_stable.html --default-timeout=60

      - name: Test PyGrid
        continue-on-error: true
        run: |
          pip install -e . --default-timeout=60
          pip install -r requirements.grid.txt --default-timeout=60
          pytest -m grid
