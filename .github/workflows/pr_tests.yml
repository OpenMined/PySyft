# PR Tests
# To speed up development we don't run all the tests when opening and updating a PR.
# Instead we first run the lint check which fails fast and then only run the
# `pytest -m fast` tests against Ubuntu and Windows and the notebook examples.
# Once these checks pass and we decide to do a merge, the actions in `merge_tests.yml`
# get executed.
name: PR Tests

on:
  pull_request:
    branches:
      - dev
      - "0.4"
    paths:
      - "**.py"
      - "setup.cfg"
      - ".github/workflows/**.yml"

jobs:
  python-linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - uses: pre-commit/action@v2.0.0

      - name: Run lint checks
        run: |
          set -e
          pip install -r requirements.txt
          ./scripts/build_proto.sh
          pre-commit run --all-files

  python-tests-fast:
    needs: [python-linting]
    strategy:
      max-parallel: 24
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8, 3.7, 3.6]
        torch-version: [1.5.0, 1.5.1, 1.6.0, 1.7.0]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: '%LOCALAPPDATA%\pip\Cache'
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Scan for security issues
        run: |
          pip install bandit
          bandit -r src -ll

      - name: Install PyTorch Linux and MacOS
        if: startsWith(runner.os, 'Windows') != true
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          if [ $TORCH_VERSION = "1.5.0" ]
          then
              TORCHVISION_VERSION="0.6.0"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              TORCHVISION_VERSION="0.6.1"
          elif [ $TORCH_VERSION = "1.6.0" ]
          then
              TORCHVISION_VERSION="0.7"
              TORCHCSPRNG_VERSION="0.1.2"
          elif [ $TORCH_VERSION = "1.7.0" ]
          then
              TORCHVISION_VERSION="0.8.1"
              TORCHCSPRNG_VERSION="0.1.3"
          fi
          pip install torch==${TORCH_VERSION} torchvision==${TORCHVISION_VERSION}

          if [ $TORCH_VERSION = "1.5.0" ]
          then
              echo "No torchcsprng"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              echo "No torchcsprng"
          else
            pip install torchcsprng==${TORCHCSPRNG_VERSION}
          fi

      - name: Install PyTorch Windows
        if: startsWith(runner.os, 'Windows')
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          If ($env:TORCH_VERSION -eq "1.5.0") {
              $env:TORCHVISION_VERSION="0.6.0"
          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {
              $env:TORCHVISION_VERSION="0.6.1"
          } Elseif ($env:TORCH_VERSION -eq "1.6.0") {
              $env:TORCHVISION_VERSION="0.7"
              $env:TORCHCSPRNG_VERSION="0.1.2"
          } Elseif ($env:TORCH_VERSION -eq "1.7.0") {
              $env:TORCHVISION_VERSION="0.8.1"
              $env:TORCHCSPRNG_VERSION="0.1.3"
          }
          pip install torch==$env:TORCH_VERSION+cpu torchvision==$env:TORCHVISION_VERSION+cpu -f https://download.pytorch.org/whl/torch_stable.html

          If ($env:TORCH_VERSION -eq "1.5.0") {

          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {

          } Else {
            pip install torchcsprng==$env:TORCHCSPRNG_VERSION -f https://download.pytorch.org/whl/torch_stable.html
          }
          pip install numpy==1.19.3

      - name: Install packages
        run: |
          pip install -r requirements.txt
          pip install -e .
          pip freeze

      - name: Run normal tests without coverage
        run: |
          pytest -m fast --cov-fail-under 80 -n auto

      - name: Install supported library packages Linux and MacOS - Ignore Errors
        if: startsWith(runner.os, 'Windows') != true
        run: |
          cat requirements/supported_libs.txt | xargs -n 1 pip install || true

      - name: Install supported library packages Windows - Ignore Errors
        if: startsWith(runner.os, 'Windows')
        run: |
          foreach ($i in cat requirements/supported_libs.txt) {
            pip install $i
          }
          pip install numpy==1.19.3

      - name: Install PyTorch Linux and MacOS
        if: startsWith(runner.os, 'Windows') != true
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          if [ $TORCH_VERSION = "1.5.0" ]
          then
              TORCHVISION_VERSION="0.6.0"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              TORCHVISION_VERSION="0.6.1"
          elif [ $TORCH_VERSION = "1.6.0" ]
          then
              TORCHVISION_VERSION="0.7"
              TORCHCSPRNG_VERSION="0.1.2"
          elif [ $TORCH_VERSION = "1.7.0" ]
          then
              TORCHVISION_VERSION="0.8.1"
              TORCHCSPRNG_VERSION="0.1.3"
          fi
          pip install torch==${TORCH_VERSION} torchvision==${TORCHVISION_VERSION}

          if [ $TORCH_VERSION = "1.5.0" ]
          then
              echo "No torchcsprng"
          elif [ $TORCH_VERSION = "1.5.1" ]
          then
              echo "No torchcsprng"
          else
            pip install torchcsprng==${TORCHCSPRNG_VERSION}
          fi

      - name: Install PyTorch Windows
        if: startsWith(runner.os, 'Windows')
        env:
          TORCH_VERSION: ${{ matrix.torch-version }}
        run: |
          If ($env:TORCH_VERSION -eq "1.5.0") {
              $env:TORCHVISION_VERSION="0.6.0"
          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {
              $env:TORCHVISION_VERSION="0.6.1"
          } Elseif ($env:TORCH_VERSION -eq "1.6.0") {
              $env:TORCHVISION_VERSION="0.7"
              $env:TORCHCSPRNG_VERSION="0.1.2"
          } Elseif ($env:TORCH_VERSION -eq "1.7.0") {
              $env:TORCHVISION_VERSION="0.8.1"
              $env:TORCHCSPRNG_VERSION="0.1.3"
          }
          pip install torch==$env:TORCH_VERSION+cpu torchvision==$env:TORCHVISION_VERSION+cpu -f https://download.pytorch.org/whl/torch_stable.html

          If ($env:TORCH_VERSION -eq "1.5.0") {

          } Elseif ( $env:TORCH_VERSION -eq "1.5.1" ) {

          } Else {
            pip install torchcsprng==$env:TORCHCSPRNG_VERSION -f https://download.pytorch.org/whl/torch_stable.html
          }

      - name: Run supported library tests
        run: |
          pip freeze
          pytest -m libs --cov-fail-under 0 -n auto

  python-nb-examples:
    needs: [python-linting]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache packages
        uses: actions/cache@v2
        id: cache-reqs
        with:
          path: ~/.eggs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**.egg') }}

      - name: Run notebook API examples
        run: |
          pip install -r requirements.txt
          pip install -e .
          ./scripts/nb_test.sh
          pytest examples/api --cov-fail-under 0 -n auto
