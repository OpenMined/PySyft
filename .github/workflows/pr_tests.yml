# PR Tests
# To speed up development we don't run all the tests when opening and updating a PR.
# Instead we first run the lint check which fails fast and then only run the
# `pytest -m fast` tests against Ubuntu and Windows and the notebook examples.
# Once these checks pass and we decide to do a merge, the actions in `merge_tests.yml`
# get executed.
name: PR Tests

on:
  pull_request:
    branches:
      - dev
      - "0.4"
    paths:
      - "**.py"
      - "setup.cfg"
      - ".github/workflows/**.yml"

jobs:
  python-linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"

      - uses: pre-commit/action@v2.0.0

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Run lint checks
        run: |
          set -e
          pip install -r requirements.txt --default-timeout=60
          ./scripts/build_proto.sh
          pre-commit run --all-files
      - name: Run darglint - Ignore Errors
        continue-on-error: true
        run: |
          darglint src tests

  python-tests-fast:
    needs: [python-linting]
    strategy:
      max-parallel: 30
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8]
        torch-version: [1.5.0, 1.5.1, 1.6.0, 1.7.0]
        include:
          - os: ubuntu-latest
            python-version: 3.7
            torch-version: 1.4.0
          # - os: windows-latest
          #   python-version: 3.9
          #   torch-version: 1.7.1
          # - os: ubuntu-20.04
          #   python-version: 3.9
          #   torch-version: 1.7.1
          # - os: macos-latest
          #   python-version: 3.9
          #   torch-version: 1.7.1

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Scan for security issues
        run: |
          pip install bandit --default-timeout=60
          bandit -r src -ll

      # - name: Install aiortc native dependencies
      #   if: startsWith(runner.os, 'Linux') == true
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install libavdevice-dev libavfilter-dev libopus-dev libvpx-dev pkg-config

      - name: Install PyTorch Linux and MacOS
        if: startsWith(runner.os, 'Windows') != true
        run: |
          ./scripts/pytorch_install.sh ${{ matrix.torch-version }}

      - name: Install PyTorch Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          ./scripts/pytorch_install.ps1 ${{ matrix.torch-version }}

      - name: Install packages
        run: |
          pip install -r requirements.txt --default-timeout=60
          pip install -e . --default-timeout=60
          pip freeze

      - name: Run normal tests
        run: |
          pytest -m 'fast or slow' --cov syft --cov-fail-under 80 -n auto

      - name: Install supported library packages Linux and MacOS - Ignore Errors
        if: startsWith(runner.os, 'Windows') != true
        run: |
          cat requirements/supported_libs.txt | xargs -I {} -n 1 pip install {} --default-timeout=60 || true

      - name: Install supported library packages Windows - Ignore Errors
        if: startsWith(runner.os, 'Windows')
        run: |
          foreach ($i in cat requirements/supported_libs.txt) {
            pip install $i --default-timeout=60
          }

      - name: Re-install PyTorch Linux and MacOS
        if: startsWith(runner.os, 'Windows') != true
        run: |
          ./scripts/pytorch_install.sh ${{ matrix.torch-version }}

      - name: Re-install PyTorch Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          ./scripts/pytorch_install.ps1 ${{ matrix.torch-version }}

      - name: Run supported library tests
        run: |
          pip freeze
          pytest -m libs -n auto -k "not tenseal"
          pytest -m libs -n 1 -k "tenseal"

  python-nb-examples:
    needs: [python-linting]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Run notebook API examples
        run: |
          pip install -r requirements.txt --default-timeout=60
          pip install -e . --default-timeout=60
          ./scripts/nb_test.sh
          pytest examples/api -n auto

      - name: Install supported library packages Linux and MacOS - Ignore Errors
        if: startsWith(runner.os, 'Windows') != true
        run: |
          cat requirements/supported_libs.txt | xargs -I {} -n 1 pip install {} --default-timeout=60 || true

      - name: Run notebook Duet examples
        run: |
          pip install -r requirements.txt --default-timeout=60
          pip install -e . --default-timeout=60
          python ./scripts/nb_duet_test.py
          cd tests/syft/notebooks/ && pytest . -n 1

  pygrid-unit-tests:
    needs: [python-linting]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - uses: actions/checkout@v2
        with:
          repository: "OpenMined/PyGrid"
          ref: "pygrid_0.4.0"
          path: "pygrid"

      - name: Test PyGrid
        continue-on-error: true
        run: |
          ls
          pip install -e . --default-timeout=60
          pip install pytest PyJWT==1.7.1 flask_sockets flask_sqlalchemy bcrypt \
                      sqlalchemy_utils flask_migrate sqlalchemy_mixins flask_executor \
                      --default-timeout=60
          pytest ./pygrid/apps/domain/tests
          pytest ./pygrid/apps/network/tests
          pytest ./pygrid/apps/worker/tests
