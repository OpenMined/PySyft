name: Continuous Delivery

on:
  schedule:
    - cron: "00 12 * * 0" # Sunday 12:00 UTC
  workflow_dispatch:
    inputs:
      none:
        description: "Run syft cd manually"
        required: false

jobs:
  call-linting:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/linting.yml@dev

  call-syft_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-pr_tests.yml@dev

  call-grid-backend_test:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/grid-backend_tests.yml@dev

  call-grid-frontend_test:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/grid-frontend_tests.yml@dev

  call-syft-security:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-security.yml@dev

  call-syft-version_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/syft-version_tests.yml@dev

  call-stack-integration_tests:
    if: github.repository == 'OpenMined/PySyft' # don't run on forks
    uses: OpenMined/PySyft/.github/workflows/stack-integration_tests.yml@dev
    secrets: inherit

  deploy-syft:
    needs:
      [
        call-linting,
        call-syft_tests,
        call-grid-backend_test,
        call-syft-security,
        call-grid-frontend_test,
        call-syft-version_tests,
        call-stack-integration_tests,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SYFT_BUMP_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel twine bump2version PyYAML
          pip install -U tox
      - name: Bump the Version
        run: |
          ls **/VERSION | xargs -I {} python {}
          cat packages/grid/devspace.yaml | grep '0\.'
          bump2version prenum --allow-dirty --no-commit
          tox -e lint || true
          ls **/VERSION | xargs -I {} python {}
          cat packages/grid/devspace.yaml | grep '0\.'
          python packages/hagrid/scripts/update_manifest.py $(python packages/grid/VERSION)
      - name: Commit changes
        uses: EndBug/add-and-commit@v7
        with:
          author_name: Madhava Jay
          author_email: madhava@openmined.org
          message: "bump version"
          add: "['.bumpversion.cfg', 'VERSION', 'packages/grid/VERSION', 'packages/grid/devspace.yaml', 'packages/syft/src/syft/VERSION', 'packages/grid/frontend/package.json', 'packages/grid/frontend/src/pages/_domain/login.tsx', 'packages/syft/src/syft/__init__.py', 'packages/hagrid/hagrid/manifest_template.yml']"
          pull_strategy: NO-PULL

      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.SYFT_PYPI_TOKEN }}
        run: |
          tox -e syft.publish
          twine upload packages/syft/dist/*

      - name: Set Grid package version
        run: echo "GRID_VERSION=$(python packages/grid/VERSION)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta for Grid-Backend
        id: meta_grid_backend
        uses: docker/metadata-action@v3
        with:
          images: openmined/grid-backend
          tags: |
            type=raw,value=${{ env.GRID_VERSION }}
            type=raw,value=beta

      - name: Build and push `grid-backend` image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./packages
          file: ./packages/grid/backend/backend.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_grid_backend.outputs.tags }}
          target: backend

      - name: Docker meta for Grid-Frontend
        id: meta_grid_frontend
        uses: docker/metadata-action@v3
        with:
          images: openmined/grid-frontend
          tags: |
            type=raw,value=${{ env.GRID_VERSION }}
            type=raw,value=beta

      - name: Build and push `grid-frontend` image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./packages/grid/frontend
          file: ./packages/grid/frontend/frontend.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_grid_frontend.outputs.tags }}
          target: grid-ui-production

      - name: Docker meta for Grid-Headscale
        id: meta_grid_headscale
        uses: docker/metadata-action@v3
        with:
          images: openmined/grid-vpn-headscale
          tags: |
            type=raw,value=${{ env.GRID_VERSION }}
            type=raw,value=beta

      - name: Build and push `grid-headscale` image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/headscale.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_grid_headscale.outputs.tags }}

      - name: Docker meta for Grid-Tailscale
        id: meta_grid_tailscale
        uses: docker/metadata-action@v3
        with:
          images: openmined/grid-vpn-tailscale
          tags: |
            type=raw,value=${{ env.GRID_VERSION }}
            type=raw,value=beta

      - name: Build and push `grid-tailscale` image to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/tailscale.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_grid_tailscale.outputs.tags }}

      - name: Docker meta for grid-vpn-iptables
        id: meta_grid_vpn_iptables
        uses: docker/metadata-action@v3
        with:
          images: openmined/grid-vpn-iptables
          tags: |
            type=raw,value=${{ env.GRID_VERSION }}
            type=raw,value=beta

      - name: Build and push `grid-vpn-iptables` image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./packages/grid/vpn
          file: ./packages/grid/vpn/iptables.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_grid_vpn_iptables.outputs.tags }}
