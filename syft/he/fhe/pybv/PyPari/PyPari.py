# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyPari')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyPari')
    _PyPari = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyPari', [dirname(__file__)])
        except ImportError:
            import _PyPari
            return _PyPari
        try:
            _mod = imp.load_module('_PyPari', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyPari = swig_import_helper()
    del swig_import_helper
else:
    import _PyPari
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def pari_init(parisize: 'size_t', maxprime: 'int') -> "void":
    return _PyPari.pari_init(parisize, maxprime)
pari_init = _PyPari.pari_init

def pari_close() -> "void":
    return _PyPari.pari_close()
pari_close = _PyPari.pari_close

def string_to_poly(s: 'char *') -> "GEN":
    return _PyPari.string_to_poly(s)
string_to_poly = _PyPari.string_to_poly

def string_to_GEN(s: 'char *') -> "GEN":
    return _PyPari.string_to_GEN(s)
string_to_GEN = _PyPari.string_to_GEN

def ring_multiplication(a: 'GEN', b: 'GEN', f: 'GEN', q: 'GEN') -> "PyObject *":
    return _PyPari.ring_multiplication(a, b, f, q)
ring_multiplication = _PyPari.ring_multiplication

def ring_addition(a: 'GEN', b: 'GEN', f: 'GEN', q: 'GEN') -> "PyObject *":
    return _PyPari.ring_addition(a, b, f, q)
ring_addition = _PyPari.ring_addition

import atexit
pari_init(2000000000, 2)
atexit.register(pari_close)


def ring_mult(a, b, f, q):
    '''
    Function for multiplication over ring R = Z_q[x]/< x^n + 1 >

    Args:
        a (:class:`list`): polynomial in ring R
        b (:class:`list`): polynomial in ring R
        f (:class:`list`): polynomial x^n + 1
        q (int): public modulus
    '''
    if type(a) == type(b) == type(f) == list and type(q) == int:
        a_str = b_str = f_str = ''
        for i in range(len(a)):
            a_str += str(a[i]) + ';'
        for i in range(len(b)):
            b_str += str(b[i]) + ';'
        for i in range(len(f)):
            f_str += str(f[i]) + ';'
        q_str = str(q)
        a = string_to_poly(a_str)
        b = string_to_poly(b_str)
        f = string_to_poly(f_str)
        q = string_to_GEN(q_str)
        out = ring_multiplication(a, b, f, q)
        out = out.split(';')[:-1]
        for i in range(len(out)):
            out[i] = int(out[i])
        return out
    else:
        print("Invalid Input")


def ring_add(a, b, f, q):
    '''
    Function for multiplication over ring R = Z_q[x]/< x^n + 1 >

    Args:
    a (:class:`list`): polynomial in ring R
    b (:class:`list`): polynomial in ring R
    f (:class:`list`): polynomial x^n + 1
    q (int): public modulus
    '''
    if type(a) == type(b) == type(f) == list and type(q) == int:
        a_str = b_str = f_str = ''
        for i in range(len(a)):
            a_str += str(a[i]) + ';'
        for i in range(len(b)):
            b_str += str(b[i]) + ';'
        for i in range(len(f)):
            f_str += str(f[i]) + ';'
        q_str = str(q)
        a = string_to_poly(a_str)
        b = string_to_poly(b_str)
        f = string_to_poly(f_str)
        q = string_to_GEN(q_str)
        out = ring_addition(a, b, f, q)
        out = out.split(';')[:-1]
        for i in range(len(out)):
            out[i] = int(out[i])
        return out
    else:
        print("Invalid Input")

# This file is compatible with both classic and new-style classes.


