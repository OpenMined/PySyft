version: "3.8"
services:
  docker-host:
    image: qoomon/docker-host
    cap_add:
      - net_admin
      - net_raw

  tailscale:
    hostname: ${DOMAIN_NAME?Variable not set}
    image: "${DOCKER_IMAGE_TAILSCALE?Variable not set}:${VERSION-latest}"
    environment:
      - SERVICE_NAME=tailscale
      - RELEASE=${RELEASE:-production}
      - HOSTNAME=${DOMAIN_NAME?Variable not set}
      - STACK_API_KEY=$STACK_API_KEY
      - HTTP_PORT=${HTTP_PORT}
      - HTTPS_PORT=${HTTPS_PORT}
    volumes:
      - tailscale-data:/var/lib/tailscale
      - "/dev/net/tun:/dev/net/tun" # Required for tailscale to work
    cap_add: # Required for tailscale to work
      - net_admin
      - sys_module
    ports:
      - "${HTTP_PORT}:81"
      - "41641/udp"
      - "4000"
    depends_on:
      - "docker-host"

  proxy:
    restart: always
    image: ${DOCKER_IMAGE_TRAEFIK?Variable not set}:${TRAEFIK_VERSION?Variable not set}
    networks:
      - "${TRAEFIK_PUBLIC_NETWORK?Variable not set}"
      - default
    network_mode: service:tailscale
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - SERVICE_NAME=proxy
      - RELEASE=${RELEASE:-production}
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)"
      - "--entrypoints.web.address=:81"
      - "--entrypoints.vpn.address=:80"
      # Enable the access log, with HTTP requests
      - "--accesslog"
      # Enable the Traefik log, for configurations and errors
      - "--log"
      - "--ping=true"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.ping.rule=PathPrefix(`/ping`)"
      - "traefik.http.services.ping.loadbalancer.server.port=80"
      - "traefik.http.routers.ping.service=ping@internal"

  frontend:
    restart: always
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${VERSION-latest}"
    profiles:
      - frontend
    environment:
      - SERVICE_NAME=frontend
      - RELEASE=${RELEASE:-production}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - HTTP_PORT=${HTTP_PORT}
      - HTTPS_PORT=${HTTPS_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80"

  db:
    restart: always
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data
    environment:
      - SERVICE_NAME=db
      - RELEASE=${RELEASE:-production}
    env_file:
      - .env
    command:
      - postgres
      - --max_connections=1000 # default 100
      # - --shared_buffers=8GB # 32 MB
      # - --temp_buffers=8GB # default 8 MB
      # - --work_mem=8GB # default 4 MB
      # - --effective_io_concurrency=8 # default 1
      # - --block_size=16384 # default 8192
      # - --max_files_per_process=1000 # default 1000
      # - --segment_size=8GB # default 1GB # cant change

  redis:
    restart: always
    image: redis:${REDIS_VERSION?Variable not set}
    volumes:
      - app-redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - SERVICE_NAME=redis
      - RELEASE=${RELEASE:-production}
    env_file:
      - .env

  queue:
    restart: always
    image: rabbitmq:3
    environment:
      - SERVICE_NAME=queue
      - RELEASE=${RELEASE:-production}
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  backend:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVICE_NAME=backend
      - RELEASE=${RELEASE:-production}
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - STACK_API_KEY=${STACK_API_KEY}
      - PORT=8001
      - IGNORE_TLS_ERRORS=${IGNORE_TLS_ERRORS?False}
      - HTTP_PORT=${HTTP_PORT}
      - HTTPS_PORT=${HTTPS_PORT}
      - USE_BLOB_STORAGE=${USE_BLOB_STORAGE}
      - CONTAINER_HOST=${CONTAINER_HOST}
    command: /start.sh
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-backend.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)" # WARNING: this wont match /api/v1/syft/stream because of length
      - "traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8001"
    network_mode: service:proxy

  backend_stream:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
      - backend
    env_file:
      - .env
    environment:
      - SERVICE_NAME=backend_stream
      - RELEASE=${RELEASE:-production}
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - STACK_API_KEY=${STACK_API_KEY}
      - PORT=8011
      - STREAM_QUEUE=1
      - IGNORE_TLS_ERRORS=${IGNORE_TLS_ERRORS?False}
      - HTTP_PORT=${HTTP_PORT}
      - HTTPS_PORT=${HTTPS_PORT}
      - USE_BLOB_STORAGE=${USE_BLOB_STORAGE}
      - CONTAINER_HOST=${CONTAINER_HOST}
    command: "waitforit -address=http://localhost:8001/api/v1/syft/metadata -status=200 -timeout=600 -- /start.sh"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-backend-stream.rule=PathPrefix(`/api`) && PathPrefix(`/api/v1/syft/stream`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)" # WARNING: this only matches /api/v1/syft/stream because of length
      - "traefik.http.services.${STACK_NAME?Variable not set}-backend-stream.loadbalancer.server.port=8011"
    network_mode: service:proxy

  celeryworker:
    restart: always
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${VERSION-latest}"
    depends_on:
      - db
      - queue
    env_file:
      - .env
    environment:
      - SERVICE_NAME=celeryworker
      - RELEASE=${RELEASE:-production}
      - VERSION=${VERSION}
      - VERSION_HASH=${VERSION_HASH}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - C_FORCE_ROOT=1
      - STACK_API_KEY=${STACK_API_KEY}
      - IGNORE_TLS_ERRORS=${IGNORE_TLS_ERRORS?False}
      - HTTP_PORT=${HTTP_PORT}
      - HTTPS_PORT=${HTTPS_PORT}
      - USE_BLOB_STORAGE=${USE_BLOB_STORAGE}
      - CONTAINER_HOST=${CONTAINER_HOST}
      - NETWORK_CHECK_INTERVAL=${NETWORK_CHECK_INTERVAL}
    command: "waitforit -address=http://localhost:8001/api/v1/syft/metadata -status=200 -timeout=600 -- /worker-start.sh"
    network_mode: service:proxy

  headscale:
    profiles:
      - network
    hostname: headscale
    image: "${DOCKER_IMAGE_HEADSCALE?Variable not set}:${VERSION-latest}"
    volumes:
      - headscale-data:/headscale/data
    environment:
      - RELEASE=${RELEASE:-production}
      - NETWORK_NAME=omnet
      - STACK_API_KEY=$STACK_API_KEY
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-vpn.rule=PathPrefix(`/vpn`)"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-vpn.middlewares=${STACK_NAME?Variable not set}-vpn"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-vpn.stripprefix.prefixes=/vpn"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-vpn.stripprefix.forceslash=true"
      - "traefik.http.services.${STACK_NAME?Variable not set}-vpn.loadbalancer.server.port=8080"

  seaweedfs:
    profiles:
      - blob-storage
    image: "${DOCKER_IMAGE_SEAWEEDFS?Variable not set}"
    environment:
      - S3_VOLUME_SIZE_MB=${S3_VOLUME_SIZE_MB:-1024}
    command: "server -s3 -s3.config=/etc/s3config.json -master.volumeSizeLimitMB=${S3_VOLUME_SIZE_MB}"
    volumes:
      - seaweedfs-data:/data
      - ./seaweedfs/s3config.json:/etc/s3config.json
      - ./seaweedfs/filer.toml:/etc/seaweedfs/filer.toml

    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-blob.rule=PathPrefix(`/blob`)"
      - "traefik.http.routers.${STACK_NAME?Variable not set}-blob.middlewares=${STACK_NAME?Variable not set}-host,${STACK_NAME?Variable not set}-blob"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-host.headers.customrequestheaders.Host=${S3_ENDPOINT}:${S3_PORT}"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-blob.stripprefix.prefixes=/blob"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-blob.stripprefix.forceslash=true"
      - "traefik.http.services.${STACK_NAME?Variable not set}-blob.loadbalancer.server.port=${S3_PORT}"
      # by rewriting the customrequestheaders.Host with the same host:port as the
      # code uses internally any S3 presigned urls will still validate

volumes:
  app-db-data:
  tailscale-data:
  headscale-data:
  app-redis-data:
  seaweedfs-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}