apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: backend
  name: backend
spec:
  externalIPs: null
  ports:
  - name: port-0
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/component: backend
    app.kubernetes.io/name: devspace-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: backend
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: backend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  serviceName: backend-headless
  template:
    metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      containers:
      - args: null
        command: null
        env:
        - name: MONGO_PORT
          value: '27017'
        - name: MONGO_HOST
          value: mongo
        - name: MONGO_USERNAME
          value: root
        - name: MONGO_PASSWORD
          value: example
        - name: SERVICE_NAME
          value: backend
        - name: RELEASE
          value: production
        - name: VERSION
          value: 0.8.2-beta.36
        - name: VERSION_HASH
          value: unknown
        - name: NODE_TYPE
          value: domain
        - name: NODE_NAME
          value: default_node_name
        - name: STACK_API_KEY
          value: changeme
        - name: PORT
          value: '80'
        - name: IGNORE_TLS_ERRORS
          value: 'False'
        - name: HTTP_PORT
          value: '80'
        - name: HTTPS_PORT
          value: '443'
        - name: CONTAINER_HOST
          value: k8s
        - name: TRACE
          value: 'False'
        - name: JAEGER_HOST
          value: localhost
        - name: JAEGER_PORT
          value: '14268'
        - name: DEV_MODE
          value: 'False'
        - name: DOMAIN_CONNECTION_PORT
          value: '3030'
        - name: ENABLE_OBLV
          value: 'false'
        - name: DEFAULT_ROOT_EMAIL
          value: info@openmined.org
        - name: DEFAULT_ROOT_PASSWORD
          value: changethis
        - name: BACKEND_STORAGE_PATH
          value: /storage
        envFrom: null
        image: docker.io/openmined/grid-backend:0.8.2-beta.36
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /storage
          name: credentials-data
          readOnly: false
          subPath: credentials-data
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes: null
  volumeClaimTemplates:
  - metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
      name: credentials-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: backend
  name: backend-headless
spec:
  clusterIP: None
  ports:
  - name: web
    port: 80
  selector:
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: frontend
  name: frontend
spec:
  externalIPs: null
  ports:
  - name: port-0
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: devspace-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/component: frontend
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      containers:
      - args: null
        command: null
        env:
        - name: VERSION
          value: 0.8.2-beta.36
        - name: VERSION_HASH
          value: unknown
        - name: NODE_TYPE
          value: domain
        - name: NEXT_PUBLIC_API_URL
          value: ${NEXT_PUBLIC_API_URL}
        envFrom: null
        image: docker.io/openmined/grid-frontend:0.8.2-beta.36
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts: null
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes: null
  volumeClaimTemplates: null
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: ''
  name: grid-stack-ingress
  namespace: default
spec:
  defaultBackend:
    service:
      name: proxy
      port:
        number: 80
  rules:
  - http:
      paths:
      - backend:
          service:
            name: proxy
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongo
  name: mongo
spec:
  externalIPs: null
  ports:
  - name: port-0
    port: 27017
    protocol: TCP
    targetPort: 27017
  selector:
    app.kubernetes.io/component: mongo
    app.kubernetes.io/name: devspace-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/component: mongo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: mongo
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: mongo
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  serviceName: mongo-headless
  template:
    metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: mongo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      containers:
      - args: null
        command: null
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: example
        envFrom: null
        image: mongo:7.0.0
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /data/db
          name: mongo-data
          readOnly: false
          subPath: ''
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes: null
  volumeClaimTemplates:
  - metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: mongo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
      name: mongo-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongo
  name: mongo-headless
spec:
  clusterIP: None
  ports:
  - name: web
    port: 80
  selector:
    app.kubernetes.io/component: mongo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: proxy
  name: proxy
spec:
  externalIPs: null
  ports:
  - name: proxy
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app.kubernetes.io/component: proxy
    app.kubernetes.io/name: devspace-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/component: proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: proxy
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: proxy
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      containers:
      - args: null
        command: null
        env:
        - name: SERVICE_NAME
          value: proxy
        envFrom: null
        image: traefik:v2.10
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /etc/traefik
          name: traefik-conf
          readOnly: false
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes:
      - configMap:
          name: traefik-main-config
        name: traefik-conf
  volumeClaimTemplates: null
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: seaweedfs
  name: seaweedfs
spec:
  externalIPs: null
  ports:
  - name: port-0
    port: 8888
    protocol: TCP
    targetPort: 8888
  - name: port-1
    port: 8333
    protocol: TCP
    targetPort: 8333
  selector:
    app.kubernetes.io/component: seaweedfs
    app.kubernetes.io/name: devspace-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/component: seaweedfs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: seaweedfs
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: seaweedfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  serviceName: seaweedfs-headless
  template:
    metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: seaweedfs
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      containers:
      - args: null
        command:
        - sh
        - /etc/seaweedfs/start.sh
        env:
        - name: S3_VOLUME_SIZE_MB
          value: '1024'
        - name: S3_ROOT_USER
          value: admin
        - name: S3_ROOT_PWD
          value: admin
        - name: S3_PORT
          value: '8333'
        envFrom: null
        image: chrislusf/seaweedfs:3.55
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /etc/seaweedfs/filer.toml
          name: seaweedfs-config
          readOnly: false
          subPath: filer.toml
        - mountPath: /etc/seaweedfs/start.sh
          name: seaweedfs-config
          readOnly: false
          subPath: start.sh
        - mountPath: /data/blob
          name: seaweedfs-data
          readOnly: false
          subPath: ''
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes:
      - configMap:
          name: seaweedfs-config
        name: seaweedfs-config
  volumeClaimTemplates:
  - metadata:
      annotations:
        helm.sh/chart: component-chart-0.9.1
      labels:
        app.kubernetes.io/component: seaweedfs
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
      name: seaweedfs-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
data:
  filer.toml: |
    [leveldb2]
    enabled = true
    dir = "./filerldb2"
  start.sh: |
    #! /usr/bin/env bash

    sleep 30 &&
    echo "s3.configure -access_key ${S3_ROOT_USER} -secret_key ${S3_ROOT_PWD} -user iam -actions Read,Write,List,Tagging,Admin -apply" \
    | weed shell > /dev/null 2>&1 \
    & weed server -s3 -s3.port=${S3_PORT} -master.volumeSizeLimitMB=${S3_VOLUME_SIZE_MB}
kind: ConfigMap
metadata:
  name: seaweedfs-config
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    helm.sh/chart: component-chart-0.9.1
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: seaweedfs
  name: seaweedfs-headless
spec:
  clusterIP: None
  ports:
  - name: web
    port: 80
  selector:
    app.kubernetes.io/component: seaweedfs
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
---
apiVersion: v1
data:
  dynamic.yml: |
    http:
      services:
        frontend:
          loadBalancer:
            servers:
              - url: "http://frontend"
        backend:
          loadBalancer:
            servers:
              - url: "http://backend"
        seaweedfs:
          loadBalancer:
            servers:
              - url: "http://seaweedfs:8333"
      routers:
        frontend:
          rule: "PathPrefix(`/`)"
          entryPoints:
            - "web"
          service: "frontend"
        backend:
          rule: "PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
          entryPoints:
            - "web"
          service: "backend"
        blob-storage:
          rule: "PathPrefix(`/blob`)"
          entryPoints:
            - "web"
          service: "seaweedfs"
          middlewares:
            - "blob-storage-url"
            - "blob-storage-host"
      middlewares:
        blob-storage-host:
          headers:
            customrequestheaders:
              Host: seaweedfs:8333
        blob-storage-url:
          stripprefix:
            prefixes: /blob
            forceslash: true
  traefik.yml: |
    global:
      checkNewVersion: false
      sendAnonymousUsage: false

    log:
      level: INFO

    entryPoints:
      web:
        address: :80
      ping:
        address: :8082

    ping:
      entryPoint: "ping"

    providers:
      file:
        filename: /etc/traefik/dynamic.yml
kind: ConfigMap
metadata:
  name: traefik-main-config
  namespace: default
