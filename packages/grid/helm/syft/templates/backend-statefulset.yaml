apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: devspace-app
  name: backend
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: backend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: devspace-app
  serviceName: backend-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
    spec:
      affinity: null
      serviceAccountName: worker-manager
      containers:
      - args: null
        command: null
        env:
        - name: MONGO_PORT
          value: {{ .Values.db.mongo.settings.mongoPort }}
        - name: MONGO_HOST
          value: {{ .Values.db.mongo.settings.mongoHost }}
        - name: MONGO_USERNAME
          value: {{ .Values.db.mongo.settings.mongoUsername }}
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.db.mongo.mongosecret }}
              key: mongo-password-secret
        - name: SERVICE_NAME
          value: backend
        - name: RELEASE
          value: production
        - name: VERSION
          value: {{ .Values.container.syft_version }}
        - name: VERSION_HASH
          value: {{ .Values.node.settings.versionHash }}
        - name: NODE_TYPE
          value: {{ .Values.node.settings.nodeType }}
        - name: NODE_NAME
          value: {{ .Values.node.settings.nodeName }}
        - name: NODE_SIDE_TYPE
          value: {{ .Values.node.settings.nodeSideType }}
        - name: STACK_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.syft.syftsecret }}
              key: stackApiKey
        - name: PORT
          value: '80'
        - name: IGNORE_TLS_ERRORS
          value: 'False'
        - name: HTTP_PORT
          value: '80'
        - name: HTTPS_PORT
          value: '443'
        - name: QUEUE_PORT
          value: '{{ .Values.queue.port }}'
        - name: CREATE_PRODUCER
          value: 'true'
        - name: N_CONSUMERS
          value: '0'
        - name: CONTAINER_HOST
          value: k8s
        - name: TRACE
          value: 'False'
        - name: JAEGER_HOST
          value: localhost
        - name: JAEGER_PORT
          value: '14268'
        - name: DEV_MODE
          value: 'False'
        - name: 'LOG_LEVEL'
          value: '{{ .Values.configuration.loglevel }}'
        - name: DOMAIN_CONNECTION_PORT
          value: '3030'
        - name: ENABLE_OBLV
          value: 'false'
        - name: DEFAULT_ROOT_EMAIL
          value: {{ .Values.node.settings.defaultRootEmail }}
        - name: DEFAULT_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.syft.syftsecret }}
              key: defaultRootPassword
        - name: S3_ROOT_USER
          value: "{{ .Values.seaweedfs.S3_ROOT_USER }}"
        - name: S3_ROOT_PWD
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secrets.seaweedfs.seaweedfsecret }}
                key: S3_ROOT_PWD_SECRET
        - name: S3_PORT
          value: "{{ .Values.seaweedfs.S3_PORT }}"
        - name: SEAWEED_MOUNT_PORT
          value: "{{ .Values.seaweedfs.SEAWEED_MOUNT_PORT }}"
        envFrom: null
        image: {{ .Values.container.registry }}/openmined/grid-backend:{{ .Values.container.syft_version }}
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /root/data/creds/
          name: credentials-data
          readOnly: false
          subPath: credentials-data
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
      volumes: null
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: devspace-app
      name: credentials-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
