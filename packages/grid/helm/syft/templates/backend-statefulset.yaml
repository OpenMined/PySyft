apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: backend
    app.kubernetes.io/managed-by: Helm
  name: backend
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/component: backend
      app.kubernetes.io/managed-by: Helm
  serviceName: backend-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity: null
      serviceAccountName: backend-service-account
      containers:
      - args: null
        command: null
        imagePullPolicy: Always
        env:
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGO_PORT
          value: "{{ .Values.mongo.port }}"
        - name: MONGO_HOST
          value: {{ .Values.mongo.host }}
        - name: MONGO_USERNAME
          value: {{ .Values.mongo.username }}
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.mongo }}
              key: rootPassword
        - name: SERVICE_NAME
          value: backend
        - name: RELEASE
          value: production
        - name: VERSION
          value: "{{ .Values.syft.version }}"
        - name: VERSION_HASH
          value: {{ .Values.node.settings.versionHash }}
        - name: NODE_TYPE
          value: {{ .Values.node.settings.nodeType }}
        - name: NODE_NAME
          value: {{ .Values.node.settings.nodeName }}
        - name: NODE_SIDE_TYPE
          value: {{ .Values.node.settings.nodeSideType }}
        - name: STACK_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.syft }}
              key: stackApiKey
        - name: PORT
          value: "80"
        - name: IGNORE_TLS_ERRORS
          value: "false"
        - name: HTTP_PORT
          value: "80"
        - name: HTTPS_PORT
          value: "443"
        - name: CONTAINER_HOST
          value: "k8s"
        - name: TRACE
          value: "false"
        - name: JAEGER_HOST
          value: localhost
        - name: JAEGER_PORT
          value: "14268"
        - name: DEV_MODE
          value: "false"
        - name: DOMAIN_CONNECTION_PORT
          value: "3030"
        - name: ENABLE_OBLV
          value: "false"
        - name: DEFAULT_ROOT_EMAIL
          value: {{ .Values.node.settings.defaultRootEmail }}
        - name: DEFAULT_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secrets.syft }}
              key: defaultRootPassword
        - name: S3_ROOT_USER
          value: "{{ .Values.seaweedfs.s3RootUser }}"
        - name: S3_ROOT_PWD
          valueFrom:
            secretKeyRef:
                name: {{ .Values.secrets.seaweedfs }}
                key: s3RootPassword
        - name: S3_PORT
          value: "{{ .Values.seaweedfs.s3Port }}"
        - name: SEAWEED_MOUNT_PORT
          value: "{{ .Values.seaweedfs.mountPort }}"
        - name: QUEUE_PORT
          value: "{{ .Values.queue.port }}"
        - name: CREATE_PRODUCER
          value: "true"
        - name: N_CONSUMERS
          value: "0"
        - name: INMEMORY_WORKERS
          value: "{{ .Values.node.settings.inMemoryWorkers }}"
        - name: LOG_LEVEL
          value: {{ .Values.node.settings.logLevel }}
        - name: DEFAULT_WORKER_POOL_IMAGE
          value: {{ .Values.syft.registry }}/openmined/grid-backend:{{ .Values.syft.version }}
        - name: DEFAULT_WORKER_POOL_COUNT
          value: "{{ .Values.node.settings.defaultWorkerPoolCount }}"
        envFrom: null
        image: {{ .Values.syft.registry }}/openmined/grid-backend:{{ .Values.syft.version }}
        lifecycle: null
        livenessProbe: null
        name: container-0
        readinessProbe: null
        securityContext: null
        startupProbe: null
        volumeDevices: null
        volumeMounts:
        - mountPath: /root/data/creds/
          name: credentials-data
          readOnly: false
          subPath: credentials-data
      dnsConfig: null
      ephemeralContainers: null
      hostAliases: null
      imagePullSecrets: null
      initContainers: null
      nodeName: null
      nodeSelector: null
      overhead: null
      readinessGates: null
      securityContext: null
      terminationGracePeriodSeconds: 5
      tolerations: null
      topologySpreadConstraints: null
  volumeClaimTemplates:
  - metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/component: backend
        app.kubernetes.io/managed-by: Helm
      name: credentials-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
