apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: backend
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "common.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: backend
  serviceName: backend-headless
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/component: backend
        {{- if .Values.server.podLabels }}
        {{- toYaml .Values.server.podLabels | nindent 8 }}
        {{- end }}
      {{- if .Values.server.podAnnotations }}
      annotations: {{- toYaml .Values.server.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.server.nodeSelector }}
      nodeSelector: {{- .Values.server.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: backend-container
          image: {{ .Values.global.registry }}/openmined/syft-backend:{{ .Values.global.version }}
          imagePullPolicy: Always
          resources: {{ include "common.resources.set" (dict "resources" .Values.server.resources "preset" .Values.server.resourcesPreset) | nindent 12 }}
          env:
            # kubernetes runtime
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONTAINER_HOST
              value: "k8s"
            # syft
            - name: SERVER_TYPE
              value: {{ .Values.server.type | default "datasite" | quote }}
            - name: SERVER_NAME
              value: {{ .Values.server.name | default (printf "%s-server" .Release.Name) | quote }}
            - name: SERVER_SIDE_TYPE
              value: {{ .Values.server.side | quote }}
            - name: DEFAULT_ROOT_EMAIL
              value: {{ .Values.server.rootEmail | required "server.rootEmail is required" | quote }}
            - name: DEFAULT_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.server.secretKeyName | required "server.secretKeyName is required" }}
                  key: defaultRootPassword
            - name: LOG_LEVEL
              value: {{ .Values.server.logLevel | quote }}
            - name: QUEUE_PORT
              value: {{ .Values.server.queuePort | quote }}
            - name: CREATE_PRODUCER
              value: "true"
            - name: INMEMORY_WORKERS
              value: {{ .Values.server.inMemoryWorkers | quote }}
            - name: DEFAULT_WORKER_POOL_IMAGE
              value: "{{ .Values.global.registry }}/openmined/syft-backend:{{ .Values.global.version }}"
            - name: DEFAULT_WORKER_POOL_COUNT
              value: {{ .Values.server.defaultWorkerPool.count | quote }}
            - name: DEFAULT_WORKER_POOL_POD_LABELS
              value: {{ .Values.server.defaultWorkerPool.podLabels | toJson | quote }}
            - name: DEFAULT_WORKER_POOL_POD_ANNOTATIONS
              value: {{ .Values.server.defaultWorkerPool.podAnnotations | toJson | quote }}
            - name: USE_INTERNAL_REGISTRY
              value: {{ .Values.server.useInternalRegistry | quote }}
            - name: KANIKO_VERSION
              value: {{ .Values.global.kaniko.version | quote }}
            {{- if .Values.server.defaultBucketName }}
            - name: DEFAULT_BUCKET_NAME
              value: {{ .Values.server.defaultBucketName | quote }}
            {{- end }}
            {{- if .Values.server.debuggerEnabled }}
            - name: DEBUGGER_ENABLED
              value: "true"
            {{- end }}
            {{- if eq .Values.server.type "gateway" }}
            - name: ASSOCIATION_REQUEST_AUTO_APPROVAL
              value: {{ .Values.server.associationRequestAutoApproval | quote }}
            {{- end }}
            {{- if .Values.rtunnel.enabled }}
            - name: RATHOLE_PORT
              value: {{ .Values.rtunnel.port | quote }}
            - name: REVERSE_TUNNEL_ENABLED
              value: "true"
            {{- end }}
            # MongoDB
            - name: MONGO_PORT
              value: {{ .Values.mongo.port | quote }}
            - name: MONGO_HOST
              value: "mongo"
            - name: MONGO_USERNAME
              value: {{ .Values.mongo.username | quote }}
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongo.secretKeyName | required "mongo.secretKeyName is required" }}
                  key: rootPassword
            # SMTP
            - name: SMTP_HOST
              value: {{ .Values.server.smtp.host | quote }}
            - name: SMTP_PORT
              value: {{ .Values.server.smtp.port | quote }}
            - name: SMTP_USERNAME
              value: {{ .Values.server.smtp.username | quote }}
            - name: SMTP_PASSWORD
              {{- if .Values.server.smtp.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.server.smtp.existingSecret }}
                  key: smtpPassword
              {{ else }}
              value: {{ .Values.server.smtp.password | quote }}
              {{ end }}
            - name: EMAIL_SENDER
              value: {{ .Values.server.smtp.from | quote}}
            # SeaweedFS
            {{- if ne .Values.server.type "gateway"}}
            - name: S3_ROOT_USER
              value: {{ .Values.seaweedfs.s3.rootUser | quote }}
            - name: S3_ROOT_PWD
              valueFrom:
                secretKeyRef:
                    name: {{ .Values.seaweedfs.secretKeyName | required "seaweedfs.secretKeyName is required" }}
                    key: s3RootPassword
            {{- end }}
            - name: MIN_SIZE_BLOB_STORAGE_MB
              value: {{ .Values.seaweedfs.minSizeBlobStorageMB | quote }}
            # Tracing
            - name: TRACE
              value: "false"
            - name: SERVICE_NAME
              value: "backend"
            - name: JAEGER_HOST
              value: "localhost"
            - name: JAEGER_PORT
              value: "14268"
            # Enclave attestation
            {{- if .Values.attestation.enabled }}
            - name: ENCLAVE_ATTESTATION_ENABLED
              value: {{ .Values.attestation.enabled | quote }}
            {{- end }}
            {{- if .Values.server.env }}
            {{- toYaml .Values.server.env | nindent 12 }}
            {{- end }}
          ports:
            - name: api-port
              containerPort: 80
          volumeMounts:
            - mountPath: /root/data/creds/
              name: credentials-data
              readOnly: false
              subPath: credentials-data
          startupProbe:
            httpGet:
              path: /api/v2/metadata?probe=startupProbe
              port: api-port
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/v2/?probe=livenessProbe
              port: api-port
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe: null
        {{- if .Values.attestation.enabled }}
        - name: enclave-attestation
          image: {{ .Values.global.registry }}/openmined/syft-enclave-attestation:{{ .Values.global.version }}
          imagePullPolicy: Always
          resources: {{ include "common.resources.set" (dict "resources" .Values.attestation.resources "preset" .Values.attestation.resourcesPreset) | nindent 12 }}
          env:
            - name: UVICORN_LOG_LEVEL
              value: {{ .Values.attestation.uvicornLogLevel }}
            - name: APP_LOG_LEVEL
              value: {{ .Values.attestation.appLogLevel }}
            {{- if .Values.attestation.env }}
            {{- toYaml .Values.attestation.env | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: kernel-security
              mountPath: /sys/kernel/security
            - name: tpm-device
              mountPath: /dev/tpmrm0
          securityContext:
            privileged: true
          ports:
            - name: attestation-api
              containerPort: 4455
          startupProbe:
            httpGet:
              path: /?probe=startupProbe
              port: attestation-api
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /?probe=livenessProbe
              port: attestation-api
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe: null
        {{ end }}
      {{- if .Values.attestation.enabled }}
      volumes:
        - name: kernel-security
          hostPath:
            path: /sys/kernel/security
        - name: tpm-device
          hostPath:
            path: /dev/tpmrm0
      {{- end }}
      serviceAccountName: backend-service-account
      terminationGracePeriodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: credentials-data
      labels:
        {{- include "common.volumeLabels" . | nindent 8 }}
        app.kubernetes.io/component: backend
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Mi
