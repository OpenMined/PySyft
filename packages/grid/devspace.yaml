version: v2beta1
name: syft

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      stop_dev --all
      purge_deployments --all
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      build_images --all
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev --all              # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all
      ensure_pull_secrets --all
      build_images --all
      create_deployments --all

vars:
  DOCKER_IMAGE_BACKEND: openmined/syft-backend
  DOCKER_IMAGE_FRONTEND: openmined/syft-frontend
  DOCKER_IMAGE_SEAWEEDFS: openmined/syft-seaweedfs
  DOCKER_IMAGE_RATHOLE: openmined/syft-rathole
  DOCKER_IMAGE_ENCLAVE_ATTESTATION: openmined/syft-enclave-attestation
  CONTAINER_REGISTRY: "docker.io"
  VERSION: "0.8.7-beta.15"
  PLATFORM: $(uname -m | grep -q 'arm64' && echo "arm64" || echo "amd64")

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  backend:
    image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_BACKEND}"
    buildKit:
      args: ["--platform", "linux/${PLATFORM}"]
    dockerfile: ./backend/backend.dockerfile
    target: "backend"
    context: ../
    tags:
      - dev-${DEVSPACE_TIMESTAMP}
  frontend:
    image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_FRONTEND}"
    buildKit:
      args: ["--platform", "linux/${PLATFORM}"]
    dockerfile: ./frontend/frontend.dockerfile
    target: "syft-ui-production"
    context: ./frontend
    tags:
      - dev-${DEVSPACE_TIMESTAMP}
  seaweedfs:
    image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_SEAWEEDFS}"
    buildKit:
      args: ["--platform", "linux/${PLATFORM}"]
    dockerfile: ./seaweedfs/seaweedfs.dockerfile
    context: ./seaweedfs
    tags:
      - dev-${DEVSPACE_TIMESTAMP}

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  syft:
    helm:
      releaseName: syft-dev
      chart:
        name: ./helm/syft
      # values that need to be templated go here
      values:
        global:
          registry: ${CONTAINER_REGISTRY}
          version: dev-${DEVSPACE_TIMESTAMP}
        server: {}
      # anything that does not need templating should go in helm/examples/dev/base.yaml
      # or profile specific values files
      valuesFiles:
        - ./helm/examples/dev/base.yaml

dev:
  mongo:
    labelSelector:
      app.kubernetes.io/name: syft
      app.kubernetes.io/component: mongo
    ports:
      - port: "27017"
  seaweedfs:
    labelSelector:
      app.kubernetes.io/name: syft
      app.kubernetes.io/component: seaweedfs
    ports:
      - port: "9333" # admin
      - port: "8888" # filer
      - port: "8333" # S3
      - port: "4001" # mount azure
  backend:
    labelSelector:
      app.kubernetes.io/name: syft
      app.kubernetes.io/component: backend
    ports:
      - port: "5678" # debugpy
    containers:
      backend-container:
        env:
          - name: RELEASE
            value: development
          - name: DEV_MODE
            value: "True"
          - name: DEBUGGER_ENABLED
            value: "True"
        sync:
          - path: ./backend/grid:/root/app/grid
          - path: ../syft:/root/app/syft
        ssh:
          localPort: 3480

profiles:
  - name: datasite-low
    description: "Deploy a low-side datasite"
    patches:
      - op: add
        path: deployments.syft.helm.values.server
        value:
          side: low

  - name: migrated-datasite
    description: "Deploy a migrated datasite"
    patches:
      - op: add
        path: deployments.syft.helm.valuesFiles
        value: ./helm/examples/dev/migration.yaml

  - name: datasite-tunnel
    description: "Deploy a datasite with tunneling enabled"
    patches:
      # enable rathole image
      - op: add
        path: images
        value:
          rathole:
            image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_RATHOLE}"
            buildKit:
              args: ["--platform", "linux/${PLATFORM}"]
            dockerfile: ./rathole/rathole.dockerfile
            context: ./rathole
            tags:
              - dev-${DEVSPACE_TIMESTAMP}
      # use rathole client-specific chart values
      - op: add
        path: deployments.syft.helm.valuesFiles
        value: ./helm/examples/dev/datasite.tunnel.yaml

  - name: gateway
    description: "Deploy a Gateway Server with tunnel enabled"
    patches:
      # enable rathole image
      - op: add
        path: images
        value:
          rathole:
            image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_RATHOLE}"
            buildKit:
              args: ["--platform", "linux/${PLATFORM}"]
            dockerfile: ./rathole/rathole.dockerfile
            context: ./rathole
            tags:
              - dev-${DEVSPACE_TIMESTAMP}
      # enable rathole `devspace dev` config
      - op: add
        path: dev
        value:
          rathole:
            labelSelector:
              app.kubernetes.io/name: syft
              app.kubernetes.io/component: rathole
            ports:
              - port: "2333"
      # use gateway-specific chart values
      - op: add
        path: deployments.syft.helm.valuesFiles
        value: ./helm/examples/dev/gateway.yaml
      # remove unused images
      - op: remove
        path: images.seaweedfs
      - op: remove
        path: dev.seaweedfs
      # Port Re-Mapping
      - op: replace
        path: dev.mongo.ports[0].port
        value: 27018:27017
      - op: replace
        path: dev.backend.ports[0].port
        value: 5679:5678
      - op: replace
        path: dev.backend.containers.backend-container.ssh.localPort
        value: 3481
      - op: replace
        path: dev.rtunnel.ports[0].port
        value: 2334:2333

  - name: gcp
    description: "Deploy a high-side datasite on GCP"
    patches:
      - op: replace
        path: deployments.syft.helm.valuesFiles
        value:
          - ./helm/examples/gcp/gcp.high.yaml

  - name: gcp-low
    description: "Deploy a low-side datasite on GCP"
    patches:
      - op: replace
        path: deployments.syft.helm.valuesFiles
        value:
          - ./helm/examples/gcp/gcp.low.yaml

  - name: azure
    description: "Deploy a high-side datasite on AKS"
    patches:
      - op: replace
        path: deployments.syft.helm.valuesFiles
        value:
          - ./helm/examples/azure/azure.high.yaml

  - name: enclave
    description: "Deploy an enclave server"
    patches:
      # enable image build for enclave-attestation
      - op: add
        path: images
        value:
          enclave-attestation:
            image: "${CONTAINER_REGISTRY}/${DOCKER_IMAGE_ENCLAVE_ATTESTATION}"
            buildKit:
              args: ["--platform", "linux/amd64"]
            dockerfile: ./enclave/attestation/attestation.dockerfile
            context: ./enclave/attestation
            tags:
              - dev-${DEVSPACE_TIMESTAMP}
      - op: add
        path: dev.backend.containers
        value:
          enclave-attestation:
            sync:
              - path: ./enclave/attestation/server:/app/server
      # use gateway-specific chart values
      - op: add
        path: deployments.syft.helm.valuesFiles
        value: ./helm/examples/dev/enclave.yaml
      # Port Re-Mapping
      - op: replace
        path: dev.mongo.ports[0].port
        value: 27019:27017
      - op: replace
        path: dev.backend.ports[0].port
        value: 5680:5678
      - op: replace
        path: dev.backend.containers.backend-container.ssh.localPort
        value: 3482
      - op: replace
        path: dev.seaweedfs.ports
        value:
          - port: "9334:9333" # admin
          - port: "8889:8888" # filer
          - port: "8334:8333" # S3
          - port: "4002:4001" # mount api
