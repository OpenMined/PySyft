From df7ef3d7dd5015e563a0fc0a441ac68c88fcff21 Mon Sep 17 00:00:00 2001
From: George Muraru <murarugeorgec@gmail.com>
Date: Thu, 13 Jan 2022 23:24:57 +0000
Subject: [PATCH 1/1] Add bit_decomposition only action WIP

---
 .../common/action/smpc_action_functions.py    | 29 +++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/packages/syft/src/syft/core/node/common/action/smpc_action_functions.py b/packages/syft/src/syft/core/node/common/action/smpc_action_functions.py
index bc9262be8..6a9861143 100644
--- a/packages/syft/src/syft/core/node/common/action/smpc_action_functions.py
+++ b/packages/syft/src/syft/core/node/common/action/smpc_action_functions.py
@@ -297,6 +297,35 @@ def smpc_mul(
     return batch
 
 
+def smpc_full_adder(
+    nr_parties: int,
+    self_id: UID,
+    other_id: UID,
+    a_shape_id: Optional[UID] = None,
+    b_shape_id: Optional[UID] = None,
+    seed_id_locations: Optional[int] = None,
+    node: Optional[Any] = None,
+) -> SMPCActionSeqBatchMessage:
+    """Generator for the smpc_full_adder"""
+    # relative
+    from ..... import Tensor
+    if seed_id_locations is None or node is None:
+        raise ValueError(
+            f"The values seed_id_locations{seed_id_locations}, Node:{node} should not be None"
+        )
+
+    if not isinstance(other, (ShareTensor, Tensor)):
+        raise ValueError(f"Other should be a ShareTensor or Tensor from Syft")
+
+    generator = np.random.default_rng(seed_id_locations)
+    result_id = UID(UUID(bytes=generator.bytes(16)))
+
+    actions = []
+    batch = SMPCActionSeqBatchMessage(smpc_actions=actions, address=node.address)
+    return batch
+
+
+
 def local_decomposition(
     x: ShareTensor,
     ring_size: int,
-- 
2.25.1

