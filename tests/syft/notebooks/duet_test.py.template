# stdlib
import atexit
from multiprocessing import Process
from multiprocessing import set_start_method
import os
import shutil
import socket
import sys
import time

# third party
import pytest

# syft absolute
import syft as sy

# syft relative
from ..grid.duet.process_test import SyftTestProcess
from ..grid.duet.signaling_server_test import run

set_start_method("spawn", force=True)
PORT = 21000


def cleanup() -> None:
    checkpoint_dir = "checkpoints"
    try:
        shutil.rmtree(checkpoint_dir)
    except BaseException:
        pass
    try:
        os.makedirs(checkpoint_dir, exist_ok=True)
    except BaseException:
        pass

atexit.register(cleanup)

@pytest.fixture(scope="function", autouse=True)
def signaling_server() -> Process:
    time.sleep(3)
    print(f"creating signaling server on port {PORT}")
    grid_proc = Process(target=run, args=(PORT,))
    grid_proc.start()

    yield "server"

    print("stop signaling server")
    grid_proc.terminate()
    grid_proc.join(10)

    return grid_proc


def do() -> None:
    # stdlib
    import time

    # syft absolute
    import syft as sy

    sy.logger.add(sys.stderr, "ERROR")

    start = time.time()

    # syft relative
    from . import (  # noqa: F401
        {{DO_SCRIPT}},
    )

    sys.stderr.write(f"DO sending took {time.time() - start} sec\n")

    sy.core.common.event_loop.loop.run_forever()


def ds() -> None:
    # stdlib
    import time

    # syft absolute
    import syft as sy

    sy.logger.add(sys.stderr, "ERROR")
    start = time.time()

    # syft relative
    from . import (  # noqa: F401
        {{DS_SCRIPT}},
    )

    sys.stderr.write(f"DS get took {time.time() - start} sec\n")


{{LIB_DECORATOR}}
def test_{{TESTCASE}}() -> None:
    time.sleep(3)
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        assert s.connect_ex(("localhost", PORT)) == 0

    cleanup()

    start = time.time()

    do_proc = SyftTestProcess(target=do, args=())
    do_proc.start()

    ds_proc = SyftTestProcess(target=ds, args=())
    ds_proc.start()

    ds_proc.join(400)

    do_proc.terminate()

    if do_proc.exception:
        exception, tb = do_proc.exception
        raise Exception(tb) from exception

    if ds_proc.exception:
        exception, tb = ds_proc.exception
        raise Exception(tb) from exception

    if ds_proc.is_alive():
        ds_proc.terminate()
        raise Exception("ds_proc is hanged")

    print(f"test passed in {time.time() - start} seconds")
