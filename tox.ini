[tox]
envlist =
    lint
    syft.jupyter
    syft.publish
    syft.test.fast
    syft.test.security
    stack.test.integration
    stack.test.integration.tls
    stack.test.integration.windows
    stack.test.integration.k8s
    stack.test.integration.smpc
    grid.test.backend
requires =
    tox-run-command
    pip >= 21.2.1
skipsdist = True


[testenv]
basepython = python3
deps = pip
commands =
    python --version

[testenv:lint]
; setupdir = {toxinidir}
; changedir = {toxinidir}
description = Linting
allowlist_externals =
    bash
deps =
    black[python2]
    isort
    protoc-wheel-0
    pre-commit
commands =
    bash -c "cd {toxinidir}/packages/syft; ./scripts/build_proto.sh"
    black .
    isort .
    pre-commit run --all-files


# Syft
[testenv:syft]
deps =
    -e{toxinidir}/packages/syft[dev]
changedir = {toxinidir}/packages/syft
description = Syft
commands =
    pip list

[testenv:syft.publish]
changedir = {toxinidir}/packages/syft
description = Build and Publish Syft Wheel
commands =
    python -m pip install --upgrade pip
    pip install --upgrade setuptools wheel twine tox build
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    python -m build .

[testenv:syft.jupyter]
description = Jupyter Notebook with Editable Syft
deps =
    {[testenv:syft]deps}
    jupyter
commands =
    pip install prompt-toolkit jupyter jupyterlab --upgrade # overrides grid deps in setup.cfg which break jupyter
    jupyter lab --ip 0.0.0.0

[testenv:syft.test.fast]
description = Syft Unit Tests Fast
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}/packages/syft
commands =
    pip list
    pytest -m fast -n auto

[testenv:syft.test.security]
description = Security Checks for Syft
changedir = {toxinidir}/packages/syft
deps =
    {[testenv:syft]deps}
commands =
    pip install --upgrade pip
    bandit -r src
    safety check

[testenv:stack.test.integration]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
commands =
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_network_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_headscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_network_1 network to docker:9081 --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --build=false --tail=false'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --build=false --tail=false --headless=true'
    docker ps
    bash -c '(docker logs test_domain_1-frontend-1 -f &) | grep -q "event - compiled successfully\|nginx" || true'
    bash -c '(docker logs test_network_1-frontend-1 -f &) | grep -q "event - compiled successfully\|nginx" || true'
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_network_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5

    pytest tests/integration -m frontend -p no:randomly --co
    pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'docker stop test_network_1-frontend-1 || true'
    bash -c 'docker stop test_domain_1-frontend-1 || true'

    pytest tests/integration -m network -p no:randomly --co
    pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m general -p no:randomly --co
    pytest tests/integration -m general -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m e2e -p no:randomly --co
    pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m security -p no:randomly --co
    pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'HAGRID_ART=false hagrid land test_network_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'


[testenv:stack.test.integration.tls]
description = Integration Tests for Core Stack with TLS
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
    mkcert
    mkdir
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
    IGNORE_TLS_ERRORS = True
    CAROOT = {toxinidir}/packages/grid/tls
    CERTS = {toxinidir}/packages/grid/traefik.d/certs
commands =
    mkdir -p ./packages/grid/tls
    bash -c "mkcert -cert-file={env:CERTS}/cert.pem -key-file={env:CERTS}/key.pem '*.openmined.grid' docker-host localhost 127.0.0.1 ::1"
    ; # mkcert -install # use this if you want to test in your own browser
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_network_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_headscale-data --force || true"
    bash -c "HAGRID_ART=false hagrid launch test_network_1 network to docker:9081 --tail=false --tls --test --cert_store_path=./traefik.d/certs"
    bash -c "HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --build=false --tail=false --tls --test --cert_store_path=./traefik.d/certs"
    bash -c "HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --build=false --tail=false --headless=true --tls --test --cert_store_path=./traefik.d/certs"
    docker ps
    bash -c "(docker logs test_domain_1-frontend-1 -f &) | grep -q 'event - compiled successfully\|nginx' || true"
    bash -c "(docker logs test_network_1-frontend-1 -f &) | grep -q 'event - compiled successfully\|nginx' || true"
    bash -c "(docker logs test_domain_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    bash -c "(docker logs test_domain_2-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    bash -c "(docker logs test_network_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"

    sleep 5

    pytest tests/integration -m frontend -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    bash -c "docker stop test_network_1-frontend-1 || true"
    bash -c "docker stop test_domain_1-frontend-1 || true"

    pytest tests/integration -m network -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    pytest tests/integration -m general -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m general -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    pytest tests/integration -m e2e -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    pytest tests/integration -m security -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    bash -c "HAGRID_ART=false hagrid land test_network_1"
    bash -c "HAGRID_ART=false hagrid land test_domain_1"
    bash -c "HAGRID_ART=false hagrid land test_domain_2"

[testenv:stack.test.integration.windows]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    bash
    timeout
    chcp
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
commands =
    chcp 65001

    ; pip install -e packages/hagrid
    docker --version
    ; hagrid launch test_network_1 network to docker:9081 --tail=false --build=false --headless=true
    ; hagrid launch test_domain_1 domain to docker:9082 --tail=false --build=false --headless=true
    ; hagrid launch test_domain_2 domain to docker:9083 --tail=false --build=false --headless=true
    ; bash -c "(docker logs test_domain_1-frontend-1 -f &) | grep -q 'event - compiled successfully\|nginx' || true"
    ; bash -c "(docker logs test_network_1-frontend-1 -f &) | grep -q 'event - compiled successfully\|nginx' || true"
    ; bash -c "(docker logs test_domain_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; bash -c "(docker logs test_domain_2-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; bash -c "(docker logs test_network_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; pytest tests/integration -m frontend -p no:randomly --co
    ; pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no
    ; bash -c "docker stop test_network_1-frontend-1 || true"
    ; bash -c "docker stop test_domain_1-frontend-1 || true"

    pytest tests/integration -m network -p no:randomly --co
    pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m general -p no:randomly --co
    pytest tests/integration -m general -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m e2e -p no:randomly --co
    pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    ; pytest tests/integration -m security -p no:randomly --co
    ; pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    ; hagrid land test_network_1
    ; hagrid land test_domain_1
    ; hagrid land test_domain_2

[testenv:stack.test.integration.smpc]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
commands =
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_domain_3_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_3_tailscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tail=false --headless=true'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --build=false --tail=false --headless=true'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_3 domain to docker:9084 --build=false --tail=false --headless=true'

    docker ps
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_3-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5
    ; perform spmc test

    pytest tests/integration -m smpc -p no:randomly --co
    pytest tests/integration -m smpc -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'
    bash -c 'HAGRID_ART=false hagrid land test_domain_3'

[testenv:stack.test.integration.k8s.network]
description = Integration Tests for Network Node on Kubernetes
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
passenv=HOME
allowlist_externals =
    devspace
    docker
    kubectl
    minikube
    grep
    sleep
    bash
    kubectx
setenv =
  TEST_NETWORK_DEPLOYED_IN = minikube
  TEST_DOMAIN_DEPLOYED_IN = minikube
  HAGRID_ART = false
commands =
    minikube version
    devspace --version

    bash -c 'minikube start --profile=syft-network --disk-size=40g'
    bash -c 'kubectl --context syft-network create namespace openmined || true'
    bash -c 'cd packages/grid && devspace --kube-context syft-network --namespace openmined deploy -b -p network -p node-port -p no-frontend'

    bash -c 'minikube start --profile=syft-domain --disk-size=40g'
    bash -c 'kubectl --context syft-domain create namespace openmined || true'
    bash -c 'cd packages/grid && devspace --kube-context syft-domain --namespace openmined deploy -b -p domain -p node-port'
    docker network connect syft-network syft-domain

    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tail=false --headless=true'
    docker ps
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    docker network connect syft-network test_domain_2-tailscale-1

    pytest tests/integration -m frontend -p no:randomly --co
    pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no
    
    pytest tests/integration -m network -p no:randomly --co
    pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m general -p no:randomly --co
    pytest tests/integration -m general -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m e2e -p no:randomly --co
    pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    ; security test is not included because it doesn't make sense for k8s in its current form

    bash -c 'HAGRID_ART=false hagrid land test_domain_2'
    bash -c 'minikube stop --profile syft-domain'
    bash -c 'minikube stop --profile syft-network'

[testenv:grid.test.backend]
description = Tests for Grid Backend
deps =
    {[testenv:syft]deps}
    pytest
    pytest-xdist[psutil]
    poetry
    importlib-metadata
changedir = {toxinidir}/packages/grid/backend
allowlist_externals =
    bash
commands =
    python --version
    pip install -r requirements.txt
    pip install importlib-metadata colorama # poetry is messing this up?
    bash -c 'SQLALCHEMY_DATABASE_URI="sqlite:///file:test_db?mode=memory&cache=shared&uri=true" LOGURU_SINK="./grid.log" pytest grid/tests'

[flake8]
ignore =
    W503
max-line-length = 120
exclude =
    .tox

[mypy]
python_version = 3.9
