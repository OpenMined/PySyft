[tox]
envlist =
    lint
    grid.test.backend
    grid.test.frontend
    hagrid.publish
    stack.test.course
    stack.test.integration
    stack.test.integration.k8s
    stack.test.integration.smpc
    stack.test.integration.tls
    stack.test.integration.windows
    syft.benchmark
    syft.docs
    syft.jupyter
    syft.publish
    hagrid.publish
    syft.test.fast
    syft.test.fast.coverage
    syft.test.security
requires =
    tox-run-command
    pip >= 21.2.1
skipsdist = True


[testenv]
basepython = python3
deps = pip
commands =
    python --version


[testenv:lint]
; setupdir = {toxinidir}
; changedir = {toxinidir}
description = Linting
allowlist_externals =
    bash
deps =
    black[python2]
    isort
    protoc-wheel-0
    pre-commit
commands =
    bash -c "cd {toxinidir}/packages/syft; ./scripts/build_proto.sh"
    black .
    isort .
    pre-commit run --all-files


# Syft
[testenv:syft]
deps =
    -e{toxinidir}/packages/syft[dev]
changedir = {toxinidir}/packages/syft
description = Syft
commands =
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    pip list

[testenv:syft.publish]
changedir = {toxinidir}/packages/syft
description = Build and Publish Syft Wheel
commands =
    python -m pip install --upgrade pip
    pip install --upgrade setuptools wheel twine tox build
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    python -m build .

[testenv:hagrid.publish]
changedir = {toxinidir}/packages/hagrid
description = Build and Publish Hagrid Wheel
commands =
    python -m pip install --upgrade pip
    pip install --upgrade setuptools wheel twine tox build
    python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    python -m build .

[testenv:syft.jupyter]
description = Jupyter Notebook with Editable Syft
deps =
    {[testenv:syft]deps}
    jupyter
    jupyterlab
commands =
    pip install jupyter jupyterlab --upgrade
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    jupyter lab --ip 0.0.0.0 --ServerApp.token={posargs}

[testenv:syft.test.fast]
description = Syft Unit Tests Fast
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}/packages/syft
commands =
    pip list
    pytest -m fast -n auto

[testenv:syft.test.fast.coverage]
description = Syft Unit Tests Fast
deps =
    {[testenv:syft]deps}
    pytest-cov
changedir = {toxinidir}/packages/syft
commands =
    pytest --cov=src -m fast -n auto


[testenv:syft.test.security]
description = Security Checks for Syft
changedir = {toxinidir}/packages/syft
deps =
    {[testenv:syft]deps}
commands =
    pip install --upgrade pip
    bandit -r src
    safety check

[testenv:syft.benchmark]
description = Benchmark  for Syft
changedir = {toxinidir}
setenv =
    ;  LD_LIBRARY_PATH=/home/azureuser/actions-runner/_work/_tool/Python/3.9.10/x64/lib
commands =
    python --version
    pip install --upgrade pip
    pip install --upgrade pyperf
    pip install -e packages/syft
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    python3 benchmarks/executor.py --fast -n 26 -o test.json
    pyperf stats test.json
    pyperf hist test.json

[testenv:syft.docs]
description = Build Docs for Syft
changedir = {toxinidir}/docs
deps = -r {toxinidir}/docs/requirements.txt
allowlist_externals =
    make
    echo
commands =
    python --version
    make html
    echo "Open: {toxinidir}/docs/build/html/index.html"

[testenv:stack.test.integration]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
commands =
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_network_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_2_app-redis-data --force || true"
    bash -c "docker volume rm test_network_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_headscale-data --force || true"
    bash -c 'HAGRID_ART=false NETWORK_CHECK_INTERVAL=10 hagrid launch test_network_1 network to docker:9081 --tag=local --tail=false --test'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tag=local --tail=false --test'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tag=local --tail=false --headless --test'
    docker ps
    bash -c '(docker logs test_domain_1-frontend-1 -f &) | grep -q "event - compiled .* successfully\|nginx" || true'
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_network_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5

    pytest tests/integration -m frontend -p no:randomly --co
    pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'docker stop test_domain_1-frontend-1 || true'

    pytest tests/integration -m network -p no:randomly --co
    pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m e2e -p no:randomly --co
    pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m security -p no:randomly --co
    pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'HAGRID_ART=false hagrid land test_network_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'


[testenv:stack.test.integration.tls]
description = Integration Tests for Core Stack with TLS
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
    mkcert
    mkdir
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
    IGNORE_TLS_ERRORS = True
    CAROOT = {toxinidir}/packages/grid/tls
    CERTS = {toxinidir}/packages/grid/traefik/certs
commands =
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    mkdir -p ./packages/grid/tls
    bash -c "mkcert -cert-file={env:CERTS}/cert.pem -key-file={env:CERTS}/key.pem '*.openmined.grid' docker-host localhost 127.0.0.1 ::1"
    ; # mkcert -install # use this if you want to test in your own browser
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_network_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_2_app-redis-data --force || true"
    bash -c "docker volume rm test_network_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_tailscale-data --force || true"
    bash -c "docker volume rm test_network_1_headscale-data --force || true"
    bash -c "HAGRID_ART=false hagrid launch test_network_1 network to docker:9081 --tag=local --tail=false --tls --test --cert_store_path=./traefik/certs"
    bash -c "HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tag=local --tail=false --tls --test --cert_store_path=./traefik/certs"
    bash -c "HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tag=local --tail=false --headless=true --tls --test --cert_store_path=./traefik/certs"
    docker ps
    bash -c "(docker logs test_domain_1-frontend-1 -f &) | grep -q 'event - compiled .* successfully\|nginx' || true"
    bash -c "(docker logs test_domain_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    bash -c "(docker logs test_domain_2-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    bash -c "(docker logs test_network_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"

    sleep 5

    pytest tests/integration -m frontend -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    bash -c "docker stop test_domain_1-frontend-1 || true"

    pytest tests/integration -m network -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    pytest tests/integration -m e2e -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    pytest tests/integration -m security -p no:randomly --co
    bash -c "REQUESTS_CA_BUNDLE={env:CAROOT}/rootCA.pem pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no"

    bash -c "HAGRID_ART=false hagrid land test_network_1"
    bash -c "HAGRID_ART=false hagrid land test_domain_1"
    bash -c "HAGRID_ART=false hagrid land test_domain_2"

[testenv:stack.test.integration.windows]
description = Integration Tests for Core Stack
changedir = {toxinidir}
allowlist_externals =
    docker
    bash
    timeout
    chcp
setenv =
    HAGRID_ART = false
    PYTHONIOENCODING = utf-8
commands =
    chcp 65001
    pip install jaxlib===0.3.5 -f https://whls.blob.core.windows.net/unstable/index.html
    pip install -e packages/syft[dev]
    pip install numpy==1.22.3
    pip install primesieve==2.3.0

    ; pip install -e packages/hagrid
    docker --version
    ; hagrid launch test_network_1 network to docker:9081 --tag=local --tail=false --build=false --headless=true
    ; hagrid launch test_domain_1 domain to docker:9082 --tag=local --tail=false --build=false --headless=true
    ; hagrid launch test_domain_2 domain to docker:9083 --tag=local --tail=false --build=false --headless=true
    ; bash -c "(docker logs test_domain_1-frontend-1 -f &) | grep -q 'event - compiled .* successfully\|nginx' || true"
    ; bash -c "(docker logs test_domain_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; bash -c "(docker logs test_domain_2-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; bash -c "(docker logs test_network_1-backend_stream-1 -f &) | grep -q 'Application startup complete' || true"
    ; pytest tests/integration -m frontend -p no:randomly --co
    ; pytest tests/integration -m frontend -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no
    ; bash -c "docker stop test_domain_1-frontend-1 || true"

    pytest tests/integration -m network -p no:randomly --co
    pytest tests/integration -m network -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    pytest tests/integration -m e2e -p no:randomly --co
    pytest tests/integration -m e2e -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    ; pytest tests/integration -m security -p no:randomly --co
    ; pytest tests/integration -m security -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    ; hagrid land test_network_1
    ; hagrid land test_domain_1
    ; hagrid land test_domain_2

[testenv:stack.test.integration.smpc]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
commands =
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    pip install -e packages/hagrid
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_2_app-db-data --force || true"
    bash -c "docker volume rm test_domain_3_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_2_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_3_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_2_tailscale-data --force || true"
    bash -c "docker volume rm test_domain_3_tailscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tag=local --tail=false --headless=true --test'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_2 domain to docker:9083 --tag=local --tail=false --headless=true --test'
    bash -c 'HAGRID_ART=false hagrid launch test_domain_3 domain to docker:9084 --tag=local --tail=false --headless=true --test'

    docker ps
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_2-backend_stream-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_3-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5
    ; perform spmc test

    pytest tests/integration -m smpc -p no:randomly --co
    pytest tests/integration -m smpc -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no

    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'HAGRID_ART=false hagrid land test_domain_2'
    bash -c 'HAGRID_ART=false hagrid land test_domain_3'

[testenv:stack.test.integration.k8s]
description = Integration Tests for Core Stack
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
passenv=HOME
allowlist_externals =
    devspace
    kubectl
    minikube
    grep
    sleep
    bash
    kubectx
commands =
    minikube version
    bash -c 'minikube status && echo "minikube running" || echo "minikube starting" && minikube start --disk-size=40g'
    minikube addons enable ingress
    devspace --version
    bash -c 'kubectl create namespace openmined || true'
    devspace use namespace openmined
    bash -c 'cd packages/grid && devspace deploy -b -p domain'
    bash -c 'while ! (kubectl get ingress &) | grep -Eq "stack-ingress.*[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"; do echo "waiting for ingress" && sleep 1; done'

    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    pytest tests/integration -m k8s -p no:randomly --co
    bash -c 'TEST_DOMAIN_IP=`minikube ip` TEST_DOMAIN_PORT=80 pytest tests/integration -m k8s -vvvv -p no:randomly -p no:benchmark -o log_cli=True --capture=no'

[testenv:stack.test.course]
description = Integration Tests for Course Notebooks
deps =
    {[testenv:syft]deps}
changedir = {toxinidir}
allowlist_externals =
    docker
    grep
    sleep
    bash
commands =
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    pip install -e packages/hagrid
    pip install testbook prompt-toolkit jupyter
    docker --version
    docker compose version
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_app-redis-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:8081 --tag=local --tail=false --headless=true --test'
    bash -c 'git clone https://github.com/OpenMined/courses.git tests/course/courses/ || true'

    docker ps
    bash -c '(docker logs test_domain_1-backend_stream-1 -f &) | grep -q "Application startup complete" || true'

    sleep 5
    ; perform course notebook test
    bash -c 'cd tests/course/courses && git checkout introduction-to-remote-data-science && git pull || true'
    bash -c 'cp -r tests/course/tests/ tests/course/courses/'
    bash -c 'cd tests/course/courses && pytest -p no:randomly'
    bash -c 'HAGRID_ART=false hagrid land test_domain_1'
    bash -c 'rm -rf tests/course/courses'

[testenv:grid.test.backend]
description = Tests for Grid Backend
deps =
    {[testenv:syft]deps}
    -r {toxinidir}/packages/grid/backend/requirements.txt
    -r {toxinidir}/packages/grid/backend/requirements.dev.txt
changedir = {toxinidir}/packages/grid/backend
allowlist_externals =
    bash
commands =
    python --version
    pip install numpy==1.22.3
    pip install primesieve==2.3.0 --force-reinstall --no-cache-dir
    bash -c 'USE_NEW_SERVICE=False SQLALCHEMY_DATABASE_URI="sqlite:///file:test_db?mode=memory&cache=shared&uri=true" LOGURU_SINK="./grid.log" pytest grid/tests'
    # Test New Service
    bash -c 'USE_NEW_SERVICE=True SQLALCHEMY_DATABASE_URI="sqlite:///file:test_db?mode=memory&cache=shared&uri=true" LOGURU_SINK="./grid.log" pytest grid/tests/api/users/user_routes_test.py'

[testenv:grid.test.frontend]
description = Tests for Grid Frontend
deps =
changedir = {toxinidir}/packages/grid/frontend
allowlist_externals =
    bash
    echo
    yarn
    docker
commands =
    ; check yarn is installed
    bash ./scripts/check_yarn.sh

    ; install hagrid
    pip install -e {toxinidir}/packages/hagrid

    ; launch a domain
    bash -c "docker volume rm test_domain_1_app-db-data --force || true"
    bash -c "docker volume rm test_domain_1_tailscale-data --force || true"
    bash -c 'HAGRID_ART=false hagrid launch test_domain_1 domain to docker:9082 --tag=local --build=false --tail=false --test'
    docker ps

    ; install packages
    yarn install

    ; wait for server to be up
    bash -c '(docker logs test_domain_1-backend-1 -f &) | grep -q "Application startup complete" || true'
    bash -c '(docker logs test_domain_1-frontend-1 -f &) | grep -q "event - compiled .* successfully\|nginx" || true'

    ; run cypress
    bash -c 'HTTP_PORT=9082 yarn cypress:run'

    bash -c 'HAGRID_ART=false hagrid land test_domain_1'

[flake8]
ignore =
    W503
max-line-length = 120
exclude =
    .tox

[mypy]
python_version = 3.10
